<style>
  /* .waveform-wrapper {
    display: flex;
    flex-direction: column; 
    align-items: center;
  } */

  :host canvas {
    z-index: 0 !important;
  }


  .waveform {
    width: 100%;
    height: 25px;
    z-index: 0;
  }


  .wave-canvas {
    width: 100%;
    z-index: 0;
  }

  .waveform,
  .wave-canvas {
    opacity: 0;
    transition: opacity 0.5s ease-in-out;
  }

  .waveform.ready,
  .wave-canvas.ready {
    opacity: 1;
    z-index: 0;
  }



  #trending {
    margin: 1rem 0;
  }

  .trending #secrets {
    display: flex;
    align-items: center;
    flex-direction: row;
    gap: 10px;
    width: 100%;
    overflow-x: auto;
    overflow-y: hidden;
    scroll-snap-type: x mandatory;
    scroll-behavior: smooth;
  }


  .trend-box {
    display: flex;
    flex-direction: column;
    /* align-items: flex-start; */
    gap: .5rem;
    font-weight: 100 !important;
    height: 200px;
    width: 350px;
    border: 2px solid var(--primary-color);
    transition: opacity 0.5s ease, filter 0.5s ease;
    overflow: hidden;
    padding: 10px;
    border-radius: 15px;
    font-size: 1rem;
    font-family: 'Quicksand', sans-serif;
    scroll-snap-align: start;
    flex: 0 0 auto;
  }

  .trending .read {
    color: var(--secondary-color) !important;
  }

  .trending .controls {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
  }


  .trending .controls button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }


  .controls button {
    background: var(--secondary-color);
    border: var(--primary-color);
    padding: .75rem;
    font-size: 1rem;
    font-weight: bold;
    color: var(--text-color);
  }



  .shimmer-container {
    max-width: 900px !important;
    margin-top: 1rem;
  }

  .shimmer-wrapper {
    max-width: 900px !important;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    /* padding: 1rem; */
  }

  .shimmer-card {
    width: 100%;
    display: flex;
    background: var(--container-bg);
    border-radius: 10px;
    overflow: hidden;
    animation: pulse 1.5s infinite;
  }

  .shimmer-avatar {
    width: 50px;
    height: 50px;
    background: var(--body-bg);
    border-radius: 50%;
    margin: 1rem;
  }



  .shimmer-lines {
    flex: 1;
    padding: 1rem 0;
  }

  .shimmer-line {
    height: 10px;
    background: var(--body-bg);
    margin: 8px 0;
    border-radius: 5px;
  }

  .shimmer-line.short {
    width: 50%;
  }

  .shimmer-footer {
    display: flex;
    gap: 1rem;
    margin-top: 1rem;
  }

  .shimmer-btn {
    width: 40px;
    height: 20px;
    background: var(--body-bg);
    border-radius: 5px;
  }

  @keyframes pulse {
    0% {
      background-color: var(--container-bg);
    }

    50% {
      background-color: var(--body-bg);
    }

    100% {
      background-color: var(--container-bg);
    }
  }

  .shimmer {
    background: linear-gradient(90deg, var(--container-bg) 25%, var(--body-bg) 50%, var(--container-bg) 75%);
    background-size: 200% 100%;
    animation: shimmer 1.5s infinite;
  }

  @keyframes shimmer {
    0% {
      background-position: -200% 0;
    }

    100% {
      background-position: 200% 0;
    }
  }


  .sections-container {
    padding: 2rem;
    background: var(--card-bg);
    border-radius: 20px;
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.05);
    margin-top: 2rem;
    animation: fadeIn 0.6s ease-in;
  }

  .sections-title {
    font-size: 1.75rem;
    margin-bottom: 0.25rem;
  }

  .sections-subtext {
    font-size: 1rem;
    color: var(--text-muted);
    margin-bottom: 1.5rem;
    text-align: center;
  }

  .sections-scroll {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(230px, 1fr));
    gap: 1.25rem;
  }

  .section-card {
    background: var(--glass-bg);
    border-radius: 16px;
    padding: 1.25rem;
    text-align: center;
    transition: transform 0.2s ease, box-shadow 0.3s ease;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
    color: var(--text-primary);
  }

  .section-card:hover {
    transform: translateY(-6px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
    background: var(--highlight-bg);
  }

  .icon-circle {
    background: var(--primary-faded);
    width: 60px;
    height: 60px;
    border-radius: 50%;
    margin: 0 auto 1rem;
    display: flex;
    align-items: center;
    justify-content: center;
  }


  /* Glass Card Base */
  .glass-card {
    background: var(--glass);
    border-radius: 20px;
    backdrop-filter: var(--blur);
    -webkit-backdrop-filter: var(--blur);
    border: 1px solid rgba(255, 255, 255, 0.1);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
    padding: 1.5rem;
    margin-bottom: 2rem;
    animation: fadeInUp 0.5s ease;
  }

  /* Profile Header */
  .profile-header {
    display: flex;
    gap: 1rem;
    align-items: center;
    flex-wrap: wrap;
    background: var(--container-bg);
    padding: 1rem;
    border-radius: 30px;
  }

  #pinned-secret {
    width: 100% !important;
  }

  .pin-card .card {
    padding: .5rem !important;
  }

  .avatar-profile img:hover {
    transform: scale(1.05);
  }

  .profile-info h2 {
    margin: 0;
    font-size: 1.8rem;
  }

  .profile-info .tagline {
    color: var(--text-muted);
    font-style: italic;
    margin-bottom: 1rem;
  }

  .quick-stats {
    display: flex;
    gap: 1.5rem;
    margin: 1rem 0;
  }

  .stat {
    text-align: center;
  }

  .stat strong {
    font-size: 1.2rem;
    color: var(--primary);
  }

  /* Buttons */
  .edit-profile-btn,
  .edit,
  .delete,
  .read-more,
  .edit-comment,
  .delete-comment {
    background: var(--primary);
    color: var(--text);
    border: none;
    border-radius: 8px;
    padding: 0.5rem 1rem;
    margin-top: 0.5rem;
    cursor: pointer;
    transition: background 0.3s ease;
  }

  .edit-profile-btn:hover,
  .read-more:hover,
  .edit-comment:hover,
  .delete-comment:hover {
    background: var(--secondary);
  }


  .card-actions {
    margin-top: 1rem;
    display: flex;
    gap: 0.5rem;
  }

  .card-actions button {
    font-size: 0.9rem;
  }

  /* Reactions */
  .reaction-info,
  .reaction-counters {
    margin-top: 1rem;
    display: flex;
    gap: 1rem;
    font-size: 1.1rem;
  }

  .reaction-counters .counter {
    background: var(--highlight);
    padding: 0.5rem 1rem;
    border-radius: 12px;
  }


  /* Followers */
  .follow-stats {
    display: flex;
    gap: 2rem;
    font-size: 1rem;
  }

  .followers,
  .following {
    background: var(--highlight);
    padding: 0.75rem 1.25rem;
    border-radius: 10px;
  }

  /* Animations */
  @keyframes fadeInUp {
    0% {
      transform: translateY(16px);
      opacity: 0;
    }

    100% {
      transform: translateY(0);
      opacity: 1;
    }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .profile-header {
      flex-direction: column;
      align-items: flex-start;
    }

    .sections-scroll {
      flex-direction: column;
    }

    .stack-wrapper {
      position: relative;
      height: 420px;
      /* Adjust height as needed */
      overflow: hidden;
    }

    .section-card.sand {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      opacity: 0;
      pointer-events: none;
      transform: scale(0.95) translateY(20px);
      transition: all 0.4s ease;
      z-index: 0;
    }

    .section-card.sand.active {
      opacity: 1;
      pointer-events: auto;
      transform: scale(1) translateY(0);
      z-index: 10;
      box-shadow: 0 12px 20px rgba(0, 0, 0, 0.2);
    }

    .stack-indicator {
      text-align: center;
      margin-top: 10px;
    }

    .stack-next-btn {
      background: #333;
      color: white;
      padding: 6px 18px;
      border: none;
      border-radius: 999px;
      font-size: 0.9rem;
      cursor: pointer;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
    }
  }

  .badge {
    background: #444;
    color: #ffd54f;
    padding: 2px 8px;
    border-radius: 12px;
    font-size: 0.75rem;
    text-transform: capitalize;
  }

  /* Live Stream Bar */
  #live-stream-bar {
    display: flex;
    justify-content: space-between;
    overflow-x: auto;
    padding: 5px 2px;
    /* background: linear-gradient(135deg, var(--primary-color), var(--secondary-color)); */
    border-radius: 0 0 18px 18px;
    position: sticky;
    top: 0;
    z-index: 10;
    margin-top: .5rem;
  }

  #live-stream-bar::-webkit-scrollbar {
    display: none;
  }

  /* Sticky Start Button */
  #startStreamBtn {
    flex: 0 0 auto;
    min-width: 110px;
    height: 150px;
    position: sticky;
    left: 0;
    background: linear-gradient(135deg, #ec4899, #8b5cf6);
    color: white;
    border-radius: 20px;
    font-weight: 600;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    margin-right: 12px;
    border: none;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    z-index: 10;
    cursor: pointer;
  }

  #startStreamBtn:hover {
    transform: scale(1.05);
  }

  .streaming {
    animation: glow 1.5s infinite;
    border-radius: 20px;
  }

  @keyframes glow {
    0% {
      box-shadow: 0 0 5px var(--secondary-color), 0 0 10px var(--primary-color), 0 0 15px var(--secondary-color);
    }

    50% {
      box-shadow: 0 0 10px var(--secondary-color), 0 0 15px var(--primary-color), 0 0 20px var(--secondary-color);
    }

    100% {
      box-shadow: 0 0 5px var(--secondary-color), 0 0 10px, var(--primary-color), 0 0 15px var(--secondary-color);
    }
  }

  /* Live Stream Cards */
  .live-stream-scroll {
    display: flex;
    gap: 12px;
  }

  .stream-card {
    flex: 0 0 auto;
    min-width: 100px;
    max-width: 110px;
    height: 150px;
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    border-radius: 18px;
    padding: 10px;
    position: relative;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    cursor: pointer;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    transition: all 0.2s ease;
    border: 2px solid transparent;
  }

  .stream-card.active {
    border: 2px solid #8b5cf6;
    /* background: linear-gradient(145deg, #f3e8ff, #fdf4ff); */
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
  }


  .stream-card:hover {
    transform: scale(1.05);
  }

  .stream-card.ended {
    opacity: 0.7;
    /* pointer-events: none; */
  }


  .gist-snippet {
    font-size: 13px;
    color: #333;
    font-weight: 500;
    overflow: hidden;
    text-overflow: ellipsis;
    max-height: 80px;
    line-height: 1.4;
  }

  .stream-avatar {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    position: absolute;
    bottom: 8px;
    right: 8px;
    border: 2px solid #fff;
  }

  /* Modal Overlay */
  #streamModal {
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.6);
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 200;
  }

  .hidden {
    display: none !important;
  }


  .modal-content h2 {
    margin-bottom: 8px;
  }

  #listenerCount {
    font-size: 14px;
    color: #555;
    margin-bottom: 10px;
  }

  .gist-input-wrapper {
    margin-bottom: 16px;
  }

  #liveGistInput {
    width: 100%;
    height: 70% !important;
    padding: 12px;
    font-size: 16px;
    border-radius: 12px;
    border: 1px solid #ccc;
    resize: none;
  }

  .reaction-footer {
    display: flex;
    align-items: center;
    justify-content: space-between;
    font-size: 14px;
    margin-top: 12px;
  }

  #reactionCount {
    font-weight: bold;
    color: #ec4899;
  }


  #streamDisplay {
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.4);
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 300;
    animation: fadeIn 0.3s ease;
  }

  .stream-box {
    background: var(--container-bg);
    border-radius: 20px;
    width: 90%;
    max-width: 500px;
    padding: 20px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
    display: flex;
    flex-direction: column;
    gap: 12px;
    animation: popIn 0.3s ease;
  }

  .stream-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    font-weight: 600;
    font-size: 16px;
    color: #8b5cf6;
  }

  .user {
    margin-bottom: 0;
  }

  .stream-body {
    background: var(--body-bg);
    border-radius: 12px;
    padding: 16px;
    font-size: 15px;
    line-height: 1.6;
    white-space: pre-wrap;
    color: var(--text-muted);
    max-height: 200px;
    overflow-y: auto;
  }

  .stream-footer {
    display: flex;
    justify-content: space-between;
    font-size: 14px;
    color: #666;
  }


  .listeners {
    display: flex;
    align-items: center;
    gap: .5rem;
  }

  @keyframes popIn {
    from {
      transform: scale(0.96);
      opacity: 0;
    }

    to {
      transform: scale(1);
      opacity: 1;
    }
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }



  .listener-avatar {
    width: 24px;
    height: 24px;
    border-radius: 50%;
    margin-right: 5px;
    border: 2px solid white;
    animation: popIn 0.4s ease;
    transform: scale(0.5);
    transition: transform 0.3s ease, opacity 0.5s ease;
  }

  .listener-avatar.pop-in {
    transform: scale(1);
    opacity: 1;
  }

  .listener-avatar.fade-out {
    opacity: 0;
    transform: scale(0.5);
  }

  #listenerCount {
    margin: 0 !important;
  }


  @keyframes popIn {
    from {
      transform: scale(0.5);
      opacity: 0;
    }

    to {
      transform: scale(1);
      opacity: 1;
    }
  }

  #floatingReactions {
    position: absolute;
    bottom: 100px;
    left: 50%;
    transform: translateX(-50%);
    pointer-events: none;
  }

  .floating-reaction {
    position: absolute;
    font-size: 24px;
    animation: floatUp 1.5s ease forwards;
  }

  @keyframes floatUp {
    0% {
      transform: translateY(0) scale(1);
      opacity: 1;
    }

    100% {
      transform: translateY(-150px) scale(1.4);
      opacity: 0;
    }
  }


  .stream-ended-label {
    font-size: 0.9rem;
    color: #888;
    margin-bottom: 0.5rem;
    font-style: italic;
  }

  .typed-stream {
    /* font-family: 'Courier New', monospace; */
    white-space: pre-wrap;
    font-size: 0.95rem;
    font-weight: 500;
    line-height: 1.6;
    padding: 10px;
    animation: fadeIn 0.3s ease-in;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(4px);
    }

    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .fade-in {
    opacity: 0;
    animation: fadeIn 0.4s ease forwards;
  }

  .fade-out {
    opacity: 1;
    animation: fadeOut 0.4s ease forwards;
  }

  @keyframes fadeIn {
    to {
      opacity: 1;
    }
  }

  @keyframes fadeOut {
    to {
      opacity: 0;
      pointer-events: none;
    }
  }

  .hide {
    display: none !important;
  }

  #endStreamModal.visible {
    display: flex;
    animation: popIn 0.3s ease;
  }

  @keyframes popIn {
    from {
      transform: scale(0.9);
      opacity: 0;
    }

    to {
      transform: scale(1);
      opacity: 1;
    }
  }



  #postContainer {
    padding: .75rem 1rem;
    position: relative;
    width: 100%;
    height: 150px;
    border: 3px solid var(--primary-color);
    background: var(--container-bg);
    border-radius: 30px !important;
  }

  #postContainer textarea {
    padding: 1rem;
    width: 100%;
    height: 95px !important;
    overflow: hidden;
    outline: none;
    border: none;
    color: var(--text-color);
    background: var(--container-bg);
    font-size: 1rem;
    border-radius: 30px !important;
    font-family: 'Quicksand', sans-serif;
  }

  #postContainer .submit {
    border: none;
    background: transparent;
    color: var(--secondary-color);
    padding: .5rem;
    font-size: 2.75rem !important;
  }

  .post-action {
    position: absolute;
    right: 0%;
    bottom: -5%;
  }

  .ghost-hint {
    color: var(--text-muted);
    font-size: 0.8em;
    display: block;
    font-style: italic;
    opacity: 0;
    transform: translateY(5px);
    transition: opacity 0.4s ease, transform 0.4s ease;
  }

  .ghost-hint.visible {
    opacity: 1;
    transform: translateY(0);
  }

  /* Initial hidden state */
  .hidden {
    display: none;
    opacity: 0;
    pointer-events: none;
    transform: translateY(10px);
    transition: opacity 0.3s ease, transform 0.3s ease;
  }

  /* Active visible state */
  .visible {
    display: block;
    opacity: 1;
    transform: translateY(0);
  }

  /* Optional container fade if needed */
  .form-transition-container {
    position: relative;
    min-height: 200px;
  }

  #scroll-indicator {
    position: fixed;
    bottom: 2rem;
    left: 47%;
    transform: translateX(-50%);
    display: none;
    flex-direction: column;
    align-items: center;
    font-size: .9rem;
    color: var(--muted-foreground);
    animation: fadeInUp 1.2s ease-out forwards;
  }

  #scroll-indicator svg {
    color: var(--secondary-color);
    animation: bounce 1.5s infinite ease-in-out;
  }

  @media (min-width: 1024px) {
    #scroll-indicator {
      display: flex;
    }
  }

  @keyframes bounce {

    0%,
    100% {
      transform: translateY(0px);
    }

    50% {
      transform: translateY(10px);
    }
  }

  .toast {
    background: var(--primary-faded);
    color: var(--text-color);
    padding: 12px 20px;
    border-radius: 8px;
    margin: auto;
    max-width: 300px;
    text-align: center;
    box-shadow: 0 4px 14px rgba(0, 0, 0, 0.1);
    animation: fadein 0.3s ease, fadeout 0.3s ease 2.5s;
  }

  @keyframes fadein {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }

    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fadeout {
    from {
      opacity: 1;
      transform: translateY(0);
    }

    to {
      opacity: 0;
      transform: translateY(-10px);
    }
  }

  .share-modal {
  display: none;
  position: fixed;
  inset: 0;
  background: rgba(0,0,0,0.8);
  backdrop-filter: blur(5px);
  color: #fff;
  justify-content: center;
  align-items: center;
  z-index: 2 !important;
}

.share-modal .modal-content {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: .75rem;
}


.share-link {
  padding: .5rem;
  width: auto;
  font-size: 1rem;
  color: #fff;
  font-weight: 300;
  background: var(--secondary-color);
  border: none;
}

.socials {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 1rem;
  margin: .5rem;
}

.socials .share-whatsApp {
  color: green;
}

.socials .share-messenger {
  color: royalblue;
}
.socials .share-snapchat {
  color: yellow;
}

.socials .share-twitter {
  color: var(--text-color);
}

.close-share-modal, .copy-link {
  color: #fff !important;
}
</style>



<div id="main">

  <div id="tutorial-overlay" class="hidden">
    <div class="tutorial-step">
      <div class="tutorial-text">
        <h2> <span style="text-transform: capitalize;">
            <%= username %>
          </span> Welcome to Gossipa. Our World of Amebo!</h2>
        <p>This is a Safe Space, where you can find comfort and anonymous support.<br> Feel free to share or
          read gists in a judgment-free zone.</p>
      </div>

      <div id="progress-bar-container">
        <div id="progress-bar"></div>
      </div>
      <button id="next-step">Next</button>
      <button class="skip-btn">Skip</button>
    </div>
  </div>

  <section class="main">

    <div class="jumbotron text-center">
      <div class="container">
        <div id="feeds">

          <!-- <form id="navigator">
              <button class="navigation current">All Gists <div class="bottom-line"></div></button>
              <button class="navigation">Eavedropping <div class="bottom-line"></div></button>
            </form> -->

          <section id="live-stream-bar">
            <!-- Sticky Start Gist Button -->

            <% if(verification===true) {%>
              <button id="startStreamBtn">
                <div class="plus-icon">➕</div>
                <span>Stream Gist</span>
              </button>

              <% } %>

                <div id="postContainer">
                  <div class="card-header">

                    <div class="userdetails">
                      <a href="" class="avatar-profile thumb">
                        <img oncontextmenu="return false;" src="../.<%= profilePicture %>" alt=""
                          class="profile pic thumb">
                      </a>
                    </div>

                    <textarea name="" id="posting" placeholder="Hey <%= stealthMode ? " gossipa" + userId : username
                      %> Tell us a Gist!"></textarea>
                    <div class="post-action">
                      <p class="word-count">0/<span id="wordCount">150</span></p>
                      <button class="submit" id="quickShareBtn" title="Share"><abbr title="share">
                          <i class="fas fa-circle-plus"></i>
                        </abbr></button>
                    </div>

                    <div class="actions">
                      <button onclick="openModal('','text')"><abbr title="text">
                          <i class="fas fa-pen-to-square"></i>
                        </abbr></button>
                      <button id="openSubmitForm" onclick="openModal('','audio')" class="create">
                        <abbr title="Audio"><i class="fas fa-microphone"></i></abbr>
                      </button>
                      <select name="" id="" class="view">
                        <option value="" class="nav-text">Views <i class="fas fa-eye-slash"></i></option>
                        <option value="public">For All</option>
                        <option value="exclusive">For Chiefs</option>
                        <option value="private">For myself only</option>
                      </select>
                    </div>

                  </div>
                </div>


                <div id="submitModal" class="modal">
                  <div id="tutorial-overlay">

                    <div class="modal-content">
                      <span class="close-btn">&times;</span>

                      <div id="submitFormContainer">
                        <!-- Server-rendered form will be injected here -->

                      </div>
                    </div>
                  </div>
                </div>

                <script>

                  window.onload = function () {
                    const textArea = document.querySelector('.modal textarea')
                    if (textArea) textArea.blur();
                  }



                  function changeBg(event) {
                    event.target.style.background = "var(--secondary-color)"
                    event.target.style.border = "1px solid var(--primary-color)"
                  }
                </script>



                <!-- Scrollable Live Streams -->
                <div id="liveStreams" class="live-stream-scroll">
                  <!-- Stream cards injected dynamically -->
                </div>
          </section>

          <div id="streamDisplay" class="hidden">
            <div class="stream-box">
              <div class="stream-header">
                <div class="stream-user">
                  <div class="avatar-profile">
                    <img oncontextmenu="return false;" src="" class="profile-pic" alt="Avatar Profile">
                  </div>
                  <p class="username" style="color: var(--primary-color);">
                    <span class="user"></span>
                    <img oncontextmenu="return false;" src="" alt="Verification Badge" class="v-badge">
                  </p>
                  <span class="timestamp"></span>
                </div>
                <button id="closeStreamView">✖</button>
              </div>
              <div id="streamContentBox" class="stream-body">
                <!-- Live stream content shows here -->
              </div>
              <div class="stream-footer">
                <span id="liveReactionView" class="hidden">❤️ 0 reactions</span>
                <span id="liveListenerView">👂 0 listening</span>
              </div>

              <div id="floatingReactions"></div>
            </div>
          </div>

          <% if(verification===true){%>
            <!-- Fullscreen Stream Modal -->
            <div id="streamModal" class="hidden">
              <div class="modal-overlay">
                <div class="modal-content form-wrapper">
                  <div class="gist-input-wrapper form-wrap ">
                    <button id="closeStreamModal" class="close-btn">✖</button>
                    <div class="card-header">
                      <div class="userdetails">
                        <button id="endStreamBtn" class="end-btn">End Stream</button>
                        <h2>🎤 Stream Your Gist</h2>
                      </div>
                    </div>

                    <textarea id="liveGistInput" class="input-text" placeholder="Type your gist..."></textarea>
                  </div>

                  <div class="card-footer">

                    <div class="reaction-footer">
                      <span>Live reactions:</span>
                      <div id="reactionCount" class="">❤️ 0</div>
                    </div>

                    <div class="listeners">
                      <p id="listenerCount">👂 listeners</p>
                      <div id="listenerAvatars" class="listener-avatar"></div>
                    </div>

                  </div>

                </div>
              </div>
            </div>


            <%} %>

              <div id="streamDisplay" class="hidden">
                <div class="stream-box">
                  <div class="stream-header">
                    <div class="stream-user">
                      <div class="avatar-profile">
                        <img oncontextmenu="return false;" src="" class="profile-pic" alt="Avatar Profile">
                      </div>
                      <p class="username" style="color: var(--primary-color);">
                        <span class="user"></span>
                        <img oncontextmenu="return false;" src="" alt="Verification Badge" class="v-badge">
                      </p>
                      <span class="timestamp"></span>
                    </div>
                    <button id="closeStreamView">✖</button>
                  </div>
                  <div id="streamContentBox" class="stream-body">
                    <!-- Live stream content shows here -->
                  </div>
                  <div class="stream-footer">
                    <span id="liveReactionView" class="hidden">❤️ 0 reactions</span>
                    <span id="liveListenerView">👂 0 listening</span>
                  </div>

                  <div id="floatingReactions"></div>
                </div>
              </div>





              <div id="topOverlay"></div>
              <div id="bottomOverlay"></div>


              <!-- Shimmer Placeholder (Always Visible at First) -->
              <div id="shimmer-container" class="shimmer-container trending">
                <ul id="secrets">
                  <% for (let i=0; i < trendingGist.length; i++) { %>
                    <li class="secret shimmer-placeholder">
                      <div class="trend-box">
                        <div class="shimmer-wrapper">
                          <div class="shimmer-card">
                            <div class="shimmer-avatar"></div>
                            <div class="shimmer-lines">
                              <div class="shimmer-line short"></div>
                              <div class="shimmer-line"></div>
                              <div class="shimmer-line"></div>
                              <div class="shimmer-footer">
                                <div class="shimmer-btn"></div>
                                <div class="shimmer-btn"></div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </li>
                    <% } %>
                </ul>
              </div>

              <div id="shimmer-container" class="shimmer-container full-width">
                <ul>
                  <% for (let i=0; i < feeds.length; i++) { %>
                    <li class="secret shimmer-placeholder">
                      <div class="card">
                        <div class="shimmer-wrapper">
                          <div class="shimmer-card">
                            <div class="shimmer-avatar"></div>
                            <div class="shimmer-lines">
                              <div class="shimmer-line short"></div>
                              <div class="shimmer-line"></div>
                              <div class="shimmer-line"></div>
                              <div class="shimmer-footer">
                                <div class="shimmer-btn"></div>
                                <div class="shimmer-btn"></div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </li>
                    <% } %>
                </ul>
              </div>

              <div id="trending">
                <h2>Loudest in the Room</h2>
                <div class="trending">
                  <% if (locals.trendingGist) { %>
                    <ul id="secrets" class="real-secrets" style="display: none;">
                      <% trendingGist.forEach((trending)=> { %>
                        <li class="secret full-width">
                          <div class="trend-box">
                            <div class="card-header">
                              <div class="user-details header<%= trending.user_id %>">
                                <a href=<%=trending.user_id===userId ? '/profile' : '/profile/amebo/' + trending.user_id
                                  %> class="thumb"><img oncontextmenu="return false;"
                                    src="<%= trending.profile_picture %>" alt="Profile Picture"
                                    class="profile-pic thumb"></a>
                                <div class="user-info">
                                  <a href=<%=trending.user_id===userId ? '/profile' : '/profile/amebo/' +
                                    trending.user_id %>>
                                    <p class="username user<%= trending.user_id %>">
                                      <% if (trending.stealth_mode) {%>
                                        <span class="user">@gossipa<%= trending.user_id %></span>
                                        <% } else { %>
                                          <span class="user">@<%= trending.username %></span>
                                          <% } %>
                                            <% if(trending.verified===true) {%>
                                              <abbr title="Exclusive Membership"> <img oncontextmenu="return false;"
                                                  src="../../img/gossipa3.png" alt="" class="verified-badge"></abbr>
                                              <% } else {%>

                                                <% } %>
                                    </p>
                                  </a>
                                </div>
                                <span class="you-live-badge hidden">🎙️Live</span>
                              </div>
                              <% if(userId !==trending.user_id) {%>
                                <button data-targetid="<%= trending.user_id %>" class="listen"><i
                                    class="fas fa-ear-deaf"></i>&nbsp;<span>Eavedrop</span></button>
                                <% } else { %>
                                  <button class="listen listening">Visit profile</button>
                                  <% } %>
                            </div>
                            <div class="card-content">
                              <p>
                                <span class="content">
                                  <% if (trending.secret.split(" ").length > 20) { %>
                      <%= trending.secret.substring(0, 70) + " ..." %>
                                    <% } else { %>
                                      <%= trending.secret %>
                                        <% } %>
                                </span>
                                <% if (trending.secret.split(" ").length > 20) { %>
                  
                                      <a class=" read" href="secret/<%= trending.id %>">Read More</a>

                                  <% } %>
                              </p>
                            </div>
                          </div>

                        </li>
                        <% }); %>

                    </ul>
                    <% } %>
                      <div class="controls">
                        <button id="scrollLeft"><i class="fas fa-chevron-left"></i></button>
                        <button id="scrollRight"><i class="fas fa-chevron-right"></i></button>
                      </div>
                </div>
              </div>


              <div id="real-secrets" style="display: none;">


                <ul id="secrets">
                  <button id="alertAvatar">
                    <p>Just In</p>
                    <div class="alert-avatar"></div>
                    <i class="fas fa-arrow-up"></i>
                  </button>

                  <% feeds.forEach((post)=> { %>
                    <% if (post.type==='text' ) { %>

                      <div id="pinned" class="pinned-secret">
                        <div id="countdown" style="margin-top: 20px; font-weight: bold; text-align: center;"></div>
                      </div>


                      <li class=" secret text full-width" data-type="text" id="secret<%= post.id %>">

                        <div class="card">
                          <div class="card-header">
                            <div class="user-details header<%= post.user_id %>">
                              <a href=<%=post.user_id===userId ? '/profile' : '/profile/amebo/' + post.user_id %>
                                class="avatar-profile"><img oncontextmenu="return false;"
                                  src="<%= post.profile_picture %>" alt="Profile Picture" class="profile-pic"></a>
                              <div class="user-info">
                                <a href=<%=post.user_id===userId ? '/profile' : '/profile/amebo/' + post.user_id %>>
                                  <p class="username user<%= post.user_id %>">
                                    <% if (post.stealth_mode) {%>
                                      <span class="user">@gossipa<%= post.user_id %></span>
                                      <% } else { %>
                                        <span class="user">@<%= post.username %></span>
                                        <% } %>
                                          <% if(post.verified===true) {%>
                                            <abbr title="Exclusive Membership"> <img oncontextmenu="return false;"
                                                src="../../img/gossipa3.png" alt="" class="verified-badge"></abbr>
                                            <% } else {%>

                                              <% } %>
                                  </p>

                                </a>
                                <span class="timestamp" data-raw="<%= post.timestamp %>"></span>
                              </div>
                              <span class="you-live-badge hidden">🎙️Live</span>
                              <span id="streamEndedNotice" class="badge ended hidden">Stream Ended ✓</span>
                            </div>
                            <% if(userId !==post.user_id) {%>
                              <button data-targetid="<%= post.user_id %>" class="listen"><i
                                  class="fas fa-ear-deaf"></i>&nbsp;<span>Eavedrop</span></button>
                              <% } else { %>
                                <button class="listen listening">Visit profile</button>
                                <% } %>
                          </div>

                          <div class="card-content">
                            <p>
                              <span class="content">
                                <% if (post.secret.split(" ").length > 150) { %>
                    <%= post.secret.substring(0, 250) + " ..." %>
                                  <% } else { %>
                                    <%= post.secret %>
                                      <% } %>
                              </span>
                              <% if (post.secret.split(" ").length > 150) { %>
                
                        <button
                          class=" read" data-full="<%= post.secret %>"
                                data-truncated="<%= post.secret.substring(0, 250) + '...' %>">
                                Read More
                                </button>


                                <% } %>
                            </p>
                          </div>


                          <div class="comment-section" data-post-id="<%= post.id %>" data-type="<%= post.type %>">

                            <div class="reactions sleek">
                              <div class="first-action">
                                <div class="secret-card" data-id="<%= post.id %>">
                                  <div class="reaction">
                                    <button class="reaction-btn " data-type="hot">
                                      <!-- <div id="gasp-animation" class="lottie-animation"></div> -->
                                      <img oncontextmenu="return false;" src="../../img/premium-reaction.png" alt="🔥"
                                        class="premium-reaction">

                                      <div class="reaction-class-wrapper">
                                        <span class="reaction-count none">
                                          <%= post.reactions.hot ? post.reactions.hot.count : 0 %>
                                        </span>
                                      </div>
                                    </button>

                                    <button class="reaction-btn " data-type="like">
                                      <!-- <div id="like-animation" class="lottie-animation"></div> -->
                                      👍
                                      <div class="reaction-class-wrapper">


                                        <span class="reaction-count none">
                                          <%= post.reactions.like ? post.reactions.like.count : 0 %>
                                        </span>
                                      </div>
                                    </button>

                                    <button class="reaction-btn " data-type="laugh">
                                      <!-- <div id="laugh-animation" class="lottie-animation"></div> -->

                                      😂
                                      <div class="reaction-class-wrapper">

                                        <span class="reaction-count none">
                                          <%= post.reactions.laugh ? post.reactions.laugh.count : 0 %>
                                        </span>
                                      </div>

                                    </button>

                                    <!-- <button class="reaction-btn " data-type="cry">

                                                        😢
                                                        <div class="reaction-class-wrapper">

                                                        <span class="reaction-count none">
                                                          <%= post.reactions.cry ? post.reactions.cry.count : 0 %>
                                                        </span>
                                                        </div>
                                                        
                                                      </button> -->

                                    <button class="reaction-btn " data-type="gasp">
                                      <!-- <div id="gasp-animation" class="lottie-animation"></div> -->
                                      😱
                                      <div class="reaction-class-wrapper">

                                        <span class="reaction-count none">
                                          <%= post.reactions.gasp ? post.reactions.gasp.count : 0 %>
                                        </span>
                                      </div>

                                    </button>

                                  </div>

                                </div>

                                <button id="commentButton"><i class="fas fa-comment"></i><span
                                    class="comment-count"></span>
                                </button>
                              </div>

                              <ul class="second-action">
                                <li>
                                  <abbr title="Bookmark">
                                    <button class="bookmark-btn" data-id="<%= post.id %>" data-type="<%= post.type %>">
                                      <i class="fas fa-bookmark"></i>
                                    </button>
                                  </abbr>
                                </li>

                                <li>
                                  <button class="share-btn ">
                                    <abbr title="Share"><i class="fas fa-upload"></i></abbr>
                                  </button>
                                </li>


                                <!-- Share Modal -->
                                <div class="share-modal" class="modal hidden">
                                  <div class="modal-content">
                                    <h2>Spread the Gossip 🐦✨</h2>
                                    <p>Share this gist with your crew and keep the buzz alive!</p>

                                    <div class="link-box">
                                      <input class="share-link" type="text" readonly>
                                      <button class="copy-link">Copy</button>
                                    </div>

                                    <ul class="socials">
                                      <li>
                                        <a class="share-twitter" target="_blank"><i
                      class="fab fa-twitter fa-2x"></i> </a>
                                      </li>
                                      <li>
                                        <a class="share-whatsApp" target="_blank"><i
                      class="fab fa-whatsapp fa-2x"></i></a>
                                      </li>
                                      <li>
                                        <a class="share-snapchat" target="_blank"><i
                      class="fab fa-snapchat fa-2x"></i></a>
                                      </li>
                                       <li>
                                        <a class="share-messenger" target="_blank"><i
                      class="fab fa-facebook fa-2x"></i> </a>
                                       </li>
                                      
                                    </ul>

                                    <button class="close-share-modal">Close</button>
                                  </div>
                                </div>

                              </ul>

                            </div>

                            <div class="comment-dropdown" id="commentDropdown">
                              <form class="comment-display" method="POST" id="commentDisplay">
                                <ul id="comments" class="comments-list"></ul>
                              </form>

                              <form action="/comment" method="POST" id="comment-form">
                                <input type="hidden" name="id" id="secretId" value="<%= post.id %>" />
                                <input type="hidden" name="secretUserId" value="<%= post.user_id %>" />
                                <input type="hidden" name="commentUserId" value="<%= userId %>" />
                                <textarea id="commentInput" placeholder="Write a comment..." name="comment"></textarea>
                                <!-- <input type="text" id="commentInput" placeholder="Write a comment" name="comment"> -->
                                <button id="postCommentButton">
                                  <!-- Post -->
                                  <i class="fas fa-paper-plane"></i>
                                </button>
                                <% if (locals.message) { %>
                                  <small>
                                    <%= message %>
                                  </small>
                                  <% } %>
                              </form>

                            </div>
                          </div>


                          <ul class="card-menu">
                            <li>
                              <button class="card-toggle-btn"><i class="fas fa-ellipsis-vertical"></i></button>
                              <ul class="card-menu-content" style="display: none;">
                                <li>
                                  <button class="report-btn" data-id="<%= post.id %>">
                                    <i class="fa-regular fa-flag"></i>Report
                                  </button>
                                </li>
      
                              </ul>
                            </li>
                          </ul>

                        </div>
                      </li>

                      <% } else if (post.type==='audio' ) { %>
                        <!-- Audio post UI -->
                        <li class="secret audio full-width" data-type="audio">
                          <div class="card ">
                            <div class="card-header">
                              <div class="user-details header<%= post.user_id %>">
                                <a href="/profile/amebo/<%= post.user_id %>" class="avatar-profile"><img
                                    oncontextmenu="return false;" src="<%= post.profile_picture %>"
                                    alt="Profile Picture" class="profile-pic"></a>
                                <div class="user-info">
                                  <a href="/profile/amebo/<%= post.user_id %>">
                                    <p class="username user<%= post.user_id %>">
                                      <% if (post.stealthMode) {%>
                                        <span class="user">@gossipa<%= post.user_id %></span>
                                        <% } else { %>
                                          <span class="user">@<%= post.username %></span>
                                          <% } %>
                                            <% if(post.verified===true) {%>
                                              <abbr title="Exclusive Membership"> <img oncontextmenu="return false;"
                                                  src="../../img/gossipa3.png" alt="" class="verified-badge"></abbr>
                                              <% } else {%>

                                                <% } %>
                                    </p>

                                  </a>
                                  <span class="timestamp" data-raw="<%= post.timestamp %>"></span>
                                </div>
                                <span class="you-live-badge hidden">🎙️Live</span>
                                <span id="streamEndedNotice" class="badge ended hidden">Stream Ended ✓</span>
                              </div>
                              <% if(userId !==post.user_id) {%>
                                <button data-targetid="<%= post.user_id %>" class="listen"><i
                                    class="fas fa-ear-deaf"></i>&nbsp;<span>Eavedrop</span></button>
                                <% } else { %>
                                  <button class="listen listening">Visit profile</button>
                                  <% } %>
                            </div>

                            <div class="waveform-wrapper">
                              <div id="waveform-<%= post.id %>"></div>
                              <canvas id="visualizer-<%= post.id %>" class="wave-canvas"></canvas>
                              <button class="wave-play-btn" data-id="<%= post.id %>">▶️</button>
                            </div>

                            <div class="comment-section" data-post-id="<%= post.id %>" data-type="audio">

                              <div class="reactions sleek">
                                <div class="first-action">
                                  <div class="secret-card" data-id="<%= post.id %>">
                                    <div class="reaction">
                                      <button class="reaction-btn " data-type="hot">
                                        <!-- <div id="gasp-animation" class="lottie-animation"></div> -->
                                        <img oncontextmenu="return false;" src="../../img/premium-reaction.png"
                                          alt="Premium exclusive fire, hot reaction" class="premium-reaction">

                                        <div class="reaction-class-wrapper">
                                          <span class="reaction-count none">
                                            <%= post.reactions.hot ? post.reactions.hot.count : 0 %>
                                          </span>
                                        </div>
                                      </button>

                                      <button class="reaction-btn " data-type="like">
                                        <!-- <div id="like-animation" class="lottie-animation"></div> -->
                                        👍
                                        <div class="reaction-class-wrapper">


                                          <span class="reaction-count none">
                                            <%= post.reactions.like ? post.reactions.like.count : 0 %>
                                          </span>
                                        </div>
                                      </button>

                                      <button class="reaction-btn " data-type="laugh">
                                        <!-- <div id="laugh-animation" class="lottie-animation"></div> -->

                                        😂
                                        <div class="reaction-class-wrapper">

                                          <span class="reaction-count none">
                                            <%= post.reactions.laugh ? post.reactions.laugh.count : 0 %>
                                          </span>
                                        </div>

                                      </button>

                                      <!-- <button class="reaction-btn " data-type="cry">
  
                                                          😢
                                                          <div class="reaction-class-wrapper">
  
                                                          <span class="reaction-count none">
                                                            <%= post.reactions.cry ? post.reactions.cry.count : 0 %>
                                                          </span>
                                                          </div>
                                                          
                                                        </button> -->

                                      <button class="reaction-btn " data-type="gasp">
                                        <!-- <div id="gasp-animation" class="lottie-animation"></div> -->
                                        😱
                                        <div class="reaction-class-wrapper">

                                          <span class="reaction-count none">
                                            <%= post.reactions.gasp ? post.reactions.gasp.count : 0 %>
                                          </span>
                                        </div>

                                      </button>

                                    </div>

                                  </div>

                                  <button id="commentButton"><i class="fas fa-comment"></i><span
                                      class="comment-count"></span>
                                  </button>
                                </div>

                                <ul class="second-action">
                                  <li>
                                    <abbr title="Bookmark">
                                      <button class="bookmark-btn" data-id="<%= post.id %>"
                                        data-type="<%= post.type %>">
                                        <i class="fas fa-bookmark"></i>
                                      </button>
                                    </abbr>
                                  </li>

                                  <li>
                                    <button class="share-btn ">
                                      <abbr title="Share"><i class="fas fa-upload"></i></abbr>
                                    </button>
                                  </li>
  
  
                                  <!-- Share Modal -->
                                  <div class="share-modal" class="modal hidden">
                                    <div class="modal-content">
                                      <h2>Spread the Gossip 🐦✨</h2>
                                      <p>Share this gist with your crew and keep the buzz alive!</p>
  
                                      <div class="link-box">
                                        <input class="share-link" type="text" readonly>
                                        <button class="copy-link">Copy</button>
                                      </div>
  
                                      <ul class="socials">
                                        <li>
                                          <a class="share-twitter" target="_blank"><i
                        class="fab fa-twitter fa-2x"></i> </a>
                                        </li>
                                        <li>
                                          <a class="share-whatsApp" target="_blank"><i
                        class="fab fa-whatsapp fa-2x"></i></a>
                                        </li>
                                        <li>
                                          <a class="share-snapchat" target="_blank"><i
                        class="fab fa-snapchat fa-2x"></i></a>
                                        </li>
                                         <li>
                                          <a class="share-messenger" target="_blank"><i
                        class="fab fa-facebook fa-2x"></i> </a>
                                         </li>
                                        
                                      </ul>
  
                                      <button class="close-share-modal">Close</button>
                                    </div>
                                  </div>
  
                                </ul>

                              </div>

                              <div class="comment-dropdown" id="commentDropdown">
                                <form class="comment-display" method="POST" id="commentDisplay">
                                  <ul id="comments" class="comments-list"></ul>
                                </form>

                                <form action="/comment" method="POST" id="comment-form">
                                  <input type="hidden" name="audioId" id="audioId" value="<%= post.id %>" />
                                  <input type="hidden" name="secretUserId" value="<%= post.user_id %>" />
                                  <input type="hidden" name="commentUserId" value="<%= userId %>" />
                                  <textarea id="commentInput" placeholder="Write a comment..."
                                    name="comment"></textarea>
                                  <!-- <input type="text" id="commentInput" placeholder="Write a comment" name="comment"> -->
                                  <button id="postCommentButton">
                                    <!-- Post -->
                                    <i class="fas fa-paper-plane"></i>
                                  </button>
                                  <% if (locals.message) { %>
                                    <small>
                                      <%= message %>
                                    </small>
                                    <% } %>
                                </form>

                              </div>
                            </div>



                            <ul class="card-menu">
                              <li>
                                <button class="card-toggle-btn"><i class="fas fa-ellipsis-vertical"></i></button>
                                <ul class="card-menu-content" style="display: none;">
                                  <li>
                                    <button class="report-btn" data-id="<%= post.id %>">
                                      <i class="fa-regular fa-flag"></i>Report
                                    </button>
                                  </li>
                                 
                                </ul>
                              </li>
                            </ul>

                          </div>
                        </li>
                        <% } %>
                          <% }) %>

                            <div id="scroll-indicator">
                              <span>Scroll to explore</span>
                              <svg viewBox="0 0 24 24" width="24" height="24">
                                <path d="M12 5v14M19 12l-7 7-7-7" stroke="currentColor" stroke-width="2"
                                  stroke-linecap="round" stroke-linejoin="round" />
                              </svg>
                            </div>

                </ul>
              </div>
        </div>
      </div>
    </div>
    <script src="https://unpkg.com/wavesurfer.js"></script>
    <script>
      const audioPosts = <%- JSON.stringify(audioPost) %>; // This is now an array on the client
    </script>

    <script>
      document.querySelectorAll(".waveform-wrapper").forEach(wrapper => {
        const postId = wrapper.querySelector(".wave-play-btn").dataset.id;
        const waveformElement = document.querySelector(`#waveform-${postId}`);
        const canvas = document.getElementById(`visualizer-${postId}`);
        const audioPost = audioPosts.find(f => f.id == postId);
        const audioUrl = audioPost?.url;

        if (waveformElement && canvas && audioUrl) {
          const wave = WaveSurfer.create({
            container: waveformElement,
            waveColor: "#ddd",
            progressColor: "#555",
            height: 40,
            responsive: true,
            barWidth: 2,
            barGap: 2
          });

          wave.load(audioUrl);

          const playBtn = document.querySelector(`.wave-play-btn[data-id='${postId}']`);
          if (playBtn) {
            playBtn.addEventListener("click", () => wave.playPause());

            wave.on("play", () => () => {
              if (activeWave && activeWave !== wave) {
                activeWave.pause();
              }
              activeWave = wave;
              playBtn.innerText = "⏸️"
            });

            wave.on("pause", () => playBtn.innerText = "▶️");
            wave.on("finish", () => playBtn.innerText = "▶️");
          }

          wave.on("ready", () => {
            const audio = wave.media;
            setupVisualizer(audio, canvas, wave);
            waveformElement.classList.add("ready");
            canvas.classList.add("ready");
          });
        }

        function setupVisualizer(audioElement, canvas, waveInstance) {
          const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
          const analyser = audioCtx.createAnalyser();
          const source = audioCtx.createMediaElementSource(audioElement);
          const ctx = canvas.getContext("2d");

          source.connect(analyser);
          analyser.connect(audioCtx.destination);
          analyser.fftSize = 256;

          const bufferLength = analyser.frequencyBinCount;
          const dataArray = new Uint8Array(bufferLength);
          canvas.width = canvas.offsetWidth;
          canvas.height = canvas.offsetHeight;

          const width = canvas.width;
          const height = canvas.height;
          const barWidth = width / bufferLength;

          function draw() {
            requestAnimationFrame(draw);
            analyser.getByteFrequencyData(dataArray);
            ctx.clearRect(0, 0, width, height);
            dataArray.forEach((value, i) => {
              const barHeight = (value / 255) * height;
              const hue = (i / bufferLength) * 360;
              ctx.fillStyle = `hsl(${hue}, 70%, 50%)`;
              ctx.fillRect(i * barWidth, height - barHeight, barWidth - 1, barHeight);
            });
          }

          const startDrawing = () => {
            audioCtx.resume();
            draw();
          };

          // Sync drawing to play events
          if (waveInstance) {
            waveInstance.on("play", startDrawing);
          } else {
            audioElement.onplay = startDrawing;
          }
        }

      });

    </script>


    <center class="bottom-message" id="scrollEndMessage">
      <p>Reached the bottom. Scroll back to top </p>
    </center>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const scrollEndMessage = document.getElementById('scrollEndMessage');
        const scrollIndicator = document.getElementById("scroll-indicator")

        window.addEventListener('scroll', () => {
          const scrollPosition = window.scrollY + window.innerHeight;
          const pageHeight = document.body.offsetHeight;

          if (scrollPosition >= pageHeight - 50) {
            // User reached near bottom
            scrollIndicator.style.display = 'none'
            scrollEndMessage.style.opacity = '1';
            scrollEndMessage.style.zIndex = '100'
          } else {
            scrollEndMessage.style.opacity = '0';
            scrollIndicator.style.display = 'flex'
          }
        });
      });
    </script>

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const secretsContainer = document.querySelector('#trending #secrets');
        const secrets = secretsContainer.querySelectorAll("li");
        const leftBtn = document.querySelector(".controls button:first-child");
        const rightBtn = document.querySelector(".controls button:last-child");


        let currentIndex = 0;

        const updateButtons = () => {
          leftBtn.disabled = currentIndex === 0;
          rightBtn.disabled = currentIndex === secrets.length - 1;
        };

        const scrollToIndex = (index) => {
          if (index >= 0 && index < secrets.length) {

            secrets[index].scrollIntoView({ behavior: "smooth", block: "nearest", inline: "start" });
            currentIndex = index;
            updateButtons();
          }
        };

        leftBtn.addEventListener("click", () => scrollToIndex(currentIndex - 1));
        rightBtn.addEventListener("click", () => scrollToIndex(currentIndex + 1));

        // Initialize
        scrollToIndex(0);

        // Optional: Update index based on scroll (if user scrolls manually)
        secretsContainer.addEventListener("scroll", () => {
          let closestIndex = 0;
          let closestDistance = Infinity;

          secrets.forEach((item, index) => {
            const rect = item.getBoundingClientRect();
            const distance = Math.abs(rect.left);
            if (distance < closestDistance) {
              closestDistance = distance;
              closestIndex = index;
            }
          });

          currentIndex = closestIndex;
          updateButtons();
        });
      });

    </script>

    <script>
      window.currentUserId = "<%= userId %>";
      window.socket = io({ query: { userId: window.currentUserId } });

      socket.on("new-notification", (data) => {
        const alertAvatar = document.querySelector(".alert-avatar")
        const alert = document.createElement("img");
        alert.className = "alert-avatar profile-pic thumb";
        if (data.type === "post") {
          alert.src = `${data.data.avatar}`
        }

        alertAvatar.appendChild(alert)
      });
    </script>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const cards = document.querySelectorAll('#secrets .card');

        const observer = new IntersectionObserver((entries, obs) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry.target.classList.add('visible');
              obs.unobserve(entry.target); // STOP observing after it becomes visible
            }
          });
        }, {
          threshold: 0.5,
          rootMargin: '-50px 0px -60px 0px'
        });

        cards.forEach(card => observer.observe(card));
      });

    </script>




    <audio id="post-sound" src="/sounds/system-notification-199277.mp3" preload="auto"></audio>
    <script>
      const postSound = document.getElementById("post-sound");
      postSound.play();
    </script>


    <script>
      const startBtn = document.getElementById("startStreamBtn");
      const streamModal = document.getElementById("streamModal");
      const closeModal = document.getElementById("closeStreamModal");
      const endStreamBtn = document.getElementById("endStreamBtn");
      const liveGistInput = document.getElementById("liveGistInput");
      const streamContentBox = document.getElementById("streamContentBox");
      const reactionCount = document.getElementById("reactionCount");
      const liveStreams = document.getElementById("liveStreams");
      const listenerCount = document.getElementById("listenerCount");
      const streamDisplay = document.getElementById("streamDisplay");
      const streamUser = document.querySelector(".stream-user");
      const closeStreamView = document.getElementById("closeStreamView");
      const allUserHeaders = document.querySelectorAll(`.header${window.currentUserId}`);
      const liveBadgeElements = document.querySelectorAll(".you-live-badge");
      const postContainer = document.getElementById("postContainer");

      const verified = "<%= verification ? true : false %>";

      function togglePostContainer(visible) {
        if (postContainer) {
          postContainer.style.display = visible ? "block" : "none";
        }
      }

      let streamTimeout;
      let inactivityTimeout;
      let isStreaming = false;
      let reactionTotal = 0;
      let listeners = 0;
      let myStreamCard = null;

      if (verified) {
        startBtn.addEventListener("click", () => {
          const label = startBtn.querySelector("span").textContent;
          if (label === "End Stream" && isStreaming) {
            window.socket.emit("end-live-gist", { userId: window.currentUserId });
            endMyStream();
          } else {
            streamModal.classList.remove("hidden");
            liveGistInput.focus();
          }
        });
      } else {
        startBtn.setAttribute("disabled", true);
        startBtn.classList.add("disabled");
        startBtn.title = "Subscribe as Chief Gossipa to stream live gists";
      }

      closeModal.addEventListener("click", () => {
        streamModal.classList.add("hidden");
        liveGistInput.value = "";
        reactionTotal = 0;
        reactionCount.classList.add("hidden");
        reactionCount.textContent = "";
      });

      endStreamBtn.addEventListener("click", () => {
        if (isStreaming) {
          window.socket.emit("end-live-gist", { userId: window.currentUserId });
          endMyStream();
          togglePostContainer(true);
        }
      });

      closeStreamView.addEventListener("click", () => {
        streamDisplay.classList.add("hidden");
      });

      liveGistInput.addEventListener("input", (e) => {
        resetInactivityTimer();
        clearTimeout(streamTimeout);

        if (!window.socket || !window.socket.connected) return;
        const value = e.target.value;

        streamTimeout = setTimeout(() => {
          if (!value.trim()) return;

          window.socket.emit("live-gist", {
            userId: window.currentUserId,
            content: value,
          });

          if (!isStreaming) {
            isStreaming = true;
            startBtn.querySelector("span").textContent = "End Stream";
            startBtn.classList.add("streaming");

            allUserHeaders.forEach(header => {
              const badge = header.querySelector(".you-live-badge");
              const username = header.querySelector(".user")?.textContent.trim();
              if (username === `@amebo${window.currentUserId}`) {
                badge?.classList.remove("hidden");
              }
            });

            myStreamCard = addLiveGistCard({
              userId: window.currentUserId,
              content: value,
            });

            if (myStreamCard) myStreamCard.style.display = "none";
          }
        }, 300);
      });

      function resetInactivityTimer() {
        clearTimeout(inactivityTimeout);
        inactivityTimeout = setTimeout(() => {
          if (isStreaming) {
            window.socket.emit("end-live-gist", { userId: window.currentUserId });
            endMyStream();
          }
        }, 2 * 60 * 1000);
      }

      function endMyStream() {
        const card = document.querySelector(`.stream-card[data-user-id="${window.currentUserId}"]`);
        if (card) card.remove();
        myStreamCard = null;
        streamModal.classList.add("hidden");
        startBtn.classList.remove("streaming");
        liveGistInput.value = "";

        allUserHeaders.forEach(header => {
          const badge = header.querySelector(".you-live-badge");
          const username = header.querySelector(".user")?.textContent.trim();
          if (username === `@amebo${window.currentUserId}`) {
            badge?.classList.add("hidden");
          }
        });

        startBtn.querySelector("span").textContent = "Stream Gist";
        isStreaming = false;
      }

      function addLiveGistCard({ userId, content }) {
        let card = document.querySelector(`.stream-card[data-user-id="${userId}"]`);
        if (!card) {
          card = document.createElement("div");
          card.className = "stream-card active";
          card.dataset.userId = userId;
          card.innerHTML = `<div class="gist-snippet">${content.slice(0, 80)}</div>`;
          togglePostContainer(false);
          if (userId !== window.currentUserId) liveStreams.prepend(card);
        } else {
          card.querySelector(".gist-snippet").innerText = content.slice(0, 80);
        }
        return userId === window.currentUserId ? null : card;
      }

      window.addEventListener("DOMContentLoaded", () => {
        if (startBtn?.querySelector("span")) startBtn.querySelector("span").textContent = "Stream Gist";
        setTimeout(() => {
          window.socket.emit("request-live-streams");
        }, 100);
      });
    </script>

    <script>
      const postingInput = document.getElementById("posting");
      const wordCountText = document.querySelector(".word-count");
      const submitFormContainer = document.getElementById("submitFormContainer");
      const submitModal = document.getElementById("submitModal");
      let throttleTimeout = null;
      let modalInitialized = false;

      // Restore saved draft on load
      window.addEventListener("DOMContentLoaded", () => {
        const savedDraft = localStorage.getItem("gossipa_draft");
        if (savedDraft) {
          postingInput.value = savedDraft;
          updateWordCount();
        }
      });

      postingInput.addEventListener("input", function () {
        updateWordCount();

        const posting = this.value.trim();

        // Save draft
        localStorage.setItem("gossipa_draft", posting);

        if (posting.length <= 150) return;

        // Prevent multiple modals via throttle
        if (throttleTimeout) return;
        throttleTimeout = setTimeout(() => {
          openModal(posting);
          throttleTimeout = null;
        }, 300);
      });

      document.getElementById("openSubmitForm").addEventListener("click", () => openModal("", "audio"));

      function updateWordCount() {
        const count = postingInput.value.length;
        wordCountText.firstChild.textContent = `${count}/`;
      }

      function openModal(prefilledText = "", mode = "text") {

        if (window.innerWidth <= 768) {
          window.location.href = "/submit";
          return;
        }

        submitModal.style.display = "flex";

        if (modalInitialized) {
          hydrateForm(prefilledText, mode);
          mode === "audio" ? showAudioForm() : showTextForm();
          return;
        }


        fetch("/partial-submit")
          .then(res => res.text())
          .then(html => {
            submitFormContainer.innerHTML = html;
            modalInitialized = true;
            setTimeout(() => hydrateForm(prefilledText, mode), 150);
          })
          .catch(err => {
            console.error("Failed loading submit form:", err);
            alert("Error loading form. Try again later.");
          });
      }

      function hydrateForm(prefilledText, mode) {
        const textarea = document.querySelector("#submitFormContainer textarea");
        if (textarea) {
          textarea.value = prefilledText;
          textarea.focus();
          const hint = document.createElement("small");
          hint.textContent = "Let’s keep going...";
          hint.className = "ghost-hint";
          textarea.insertAdjacentElement("afterend", hint);
          requestAnimationFrame(() => hint.classList.add("visible"));
        }

        window.showTextForm = function () {
          const textForm = document.getElementById("textForm");
          const audioForm = document.getElementById("audioForm");
          textForm.classList.replace("hidden", "visible");
          audioForm.classList.replace("visible", "hidden");

          setTimeout(() => {
            audioForm.classList.add("hidden");
            textForm.classList.add("visible");
          }, 10);
        };

        window.showAudioForm = function () {
          const textForm = document.getElementById("textForm");
          const audioForm = document.getElementById("audioForm");
          audioForm.classList.replace("hidden", "visible");
          textForm.classList.replace("visible", "hidden");
          setTimeout(() => {
            textForm.classList.add("hidden");
            audioForm.classList.add("visible");
          }, 10);

        };

        mode === "audio" ? showAudioForm() : showTextForm();
      }

      // Close modal
      document.querySelector(".close-btn").addEventListener("click", () => {
        submitModal.style.display = "none";
        const hint = document.querySelector(".ghost-hint");
        hint.remove();
      });

      window.addEventListener("click", e => {
        if (e.target === submitModal) submitModal.style.display = "none";
      });
    </script>


    <script>
      const quickShareBtn = document.getElementById("quickShareBtn");

      quickShareBtn.addEventListener("click", async (e) => {
        e.preventDefault();



        // Optional: show notification
        const notice = document.getElementById("notification");
        const posting = postingInput.value.trim();
        const category = "public"; // or grab from dropdown if you use it

        // If post is too long, open the modal
        if (posting.length > 100) {
          openModal(posting); // this function already opens with prefilled text
          return;
        }

        if (!posting) {
          if (notice) {
            notice.innerHTML = `<div class="toast">You can't submit an empty gist!</div>`;
            setTimeout(() => (notice.innerHTML = ""), 3000);
          }
          return;
        }

        try {
          const response = await fetch("/share", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              secret: posting,
              category,
              contentType: "text"
            }),
          });

          const result = await response.json();

          if (result.success) {
            // Optional: play success sound
            const sound = document.getElementById("post-sound");
            if (sound) sound.play();

            // Clear input + draft
            postingInput.value = "";
            localStorage.removeItem("gossipa_draft");


            if (notice) {
              notice.innerHTML = `<div class="toast">Post shared successfully!</div>`;
              setTimeout(() => (notice.innerHTML = ""), 3000);
            }

            document.querySelector('#quickShareBtn i').classList.remove('highlight')

            // ✅ Prepend to feed
            const feed = document.querySelector("#real-secrets ul"); // adjust selector as needed
            if (feed) {
              const post = result.data;
              const user = result.user;
              const userId = result.userId

              const button = post.user_id !== userId ? `<button class='listen' data-targetid=${post.user_id}><i class='fas fa-ear-listen'></i>&nbsp;<span>Eavedrop</span></button>` : `<button class='listen listening'>Visit profile</button>`
              const stealthMode = user.stealth_mode ? `@gossipa${userId}` : "@" + user.username
              const verifiedBadge = user.verified
                ? `<img oncontextmenu="return false;" src="/img/gossipa3.png" alt="Verified Badge" class="verified-badge">`
                : "";

              const newPostHTML = `
      <li class="secret text full-width" data-type="text" id="secret${post.id}">
        <div class="card visible">
          <div class="card-header">
            <div class="user-details header${post.user_id}">
              <a href="/profile/amebo/${post.user_id}" class="avatar-profile">
                <img src="${user.profile_picture}" class="profile-pic" />
              </a>
              <div class="user-info">
                <a href="/profile/amebo/${post.user_id}">
                  <p class="username">
                    <span class="user${post.user_id}">${stealthMode}</span>
                    ${verifiedBadge}
                  </p>
                </a>
                <span class="timestamp">just now</span>
              </div>
            </div>
            ${button}
          </div>
          <div class="card-content">
            <p><span class="content">${post.secret}</span></p>
          </div>
          <div class="comment-section" data-post-id="${post.id}" data-type="text">
            <div class="reactions sleek">
              <div class="first-action">
                <div class="secret-card" data-id="${post.id}">
                  <div class="reaction">
                    <button class="reaction-btn" data-type="hot">
                      <img src="../../img/premium-reaction.png" class="premium-reaction">
                      <span class="reaction-count none">0</span>
                    </button>
                    <button class="reaction-btn" data-type="like">👍<span class="reaction-count none">0</span></button>
                    <button class="reaction-btn" data-type="laugh">😂<span class="reaction-count none">0</span></button>
                    <button class="reaction-btn" data-type="gasp">😱<span class="reaction-count none">0</span></button>
                  </div>
                </div>
                <button id="commentButton"><i class="fas fa-comment"></i><span
                                      class="comment-count"></span></button>
              </div>

              <ul class="second-action">
                                <li><abbr title="Bookmark"><i class="fas fa-bookmark"></i></abbr></li>
                                <li class=" md-none">
                                  <button class="copy-btn  md-none">
                                    <abbr title="Copy"><i class="fas fa-copy"></i></abbr>
                                  </button>
                                </li>
                              </ul>
            </div>

            <div class="comment-dropdown" id="commentDropdown">
                                <form class="comment-display" method="POST" id="commentDisplay">
                                  <ul id="comments" class="comments-list"></ul>
                                </form>

                                <form action="/comment" method="POST" id="comment-form">
                                  <input type="hidden" name="secretId" id="secretId" value="${post.id}" />
                                  <input type="hidden" name="secretUserId" value="${post.user_id}" />
                                  <input type="hidden" name="commentUserId" value="${userId}" />
                                  <textarea id="commentInput" placeholder="Write a comment..."
                                    name="comment"></textarea>
                                  <button id="postCommentButton">
                                    <i class="fas fa-paper-plane"></i>
                                  </button>
                                </form>

                              </div>
          </div>

          <ul class="card-menu">
                            <li>
                              <button class="card-toggle-btn"><i class="fas fa-ellipsis-vertical"></i></button>
                              <ul class="card-menu-content" style="display: none;">
                                <li>
                                  <button class="report-btn" data-id="${post.id}">
                                    <i class="fa-regular fa-flag"></i>Report
                                  </button>
                                </li>
      
                              </ul>
                            </li>
                          </ul>

        </div>
      </li>
    `;

              feed.insertAdjacentHTML("afterbegin", newPostHTML);
            }
          } else {
            if (notice) {
              notice.innerHTML = `<div class="toast">Failed to share. Try again.</div>`;
              setTimeout(() => (notice.innerHTML = ""), 3000);
            }

          }
        } catch (err) {
          console.error("Error sharing:", err);
          if (notice) {
            notice.innerHTML = `<div class="toast">Something went wrong. Try again.</div>`;
            setTimeout(() => (notice.innerHTML = ""), 3000);
          }
        }
      });
    </script>



    <br />

    <button id="scrollToTopBtn" class="scroll-btn"><i class="fas fa-chevron-up"></i></button>



    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const scrollBtn = document.getElementById("scrollToTopBtn");

        window.addEventListener("scroll", () => {
          scrollBtn.style.display = window.scrollY > 200 ? "block" : "none";
        });

        scrollBtn.addEventListener("click", () => {
          // Animate launch
          scrollBtn.classList.add("shrink");
          scrollBtn.classList.add("launching");

          // Scroll to top
          window.scrollTo({ top: 0, behavior: "smooth" });

          // Reset animation classes after a short delay
          setTimeout(() => {
            scrollBtn.classList.remove("shrink");
            scrollBtn.classList.remove("launching");
          }, 800);
        });
      });
    </script>
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        fetch("/api/comment-counts")
          .then(res => res.json())
          .then(counts => {
            document.querySelectorAll(".comment-section").forEach(section => {
              const id = section.dataset.postId;
              const type = section.dataset.type;
              const key = `${type}-${id}`;
              const countEl = section.querySelector(".comment-count");
              if (countEl) {
                const count = counts[key];
                countEl.textContent = typeof count !== "undefined" ? count : "0";
              }
            });
          })
          .catch(err => console.error("Failed to fetch comment counts", err));
      });



    </script>


    <script>
      async function initEavedropStatus() {
        try {
          const eavedroppingIds = await fetch("/my-eavedrops").then(res => res.json());
          eavedroppingIds.forEach(id => {
            const buttons = document.querySelectorAll(`.listen[data-targetid="${id}"]`);
            buttons.forEach(btn => {
              btn.classList.add("listening");
              btn.querySelector("span").textContent = "Eavedropping";
              btn.querySelector("i").className = "fas fa-ear-listen";
            });
          });
        } catch (err) {
          console.error("Error loading eavedrop state", err);
        }
      }

      document.addEventListener("DOMContentLoaded", initEavedropStatus);

    </script>

    <script>
      document.addEventListener("click", async (e) => {
        const btn = e.target.closest(".listen");
        if (!btn) return;

        if (btn.textContent === "Visit profile") {
          window.href = "/profile"
        }

        const span = btn.querySelector("span");
        const icon = btn.querySelector("i");
        const targetId = btn.dataset.targetid;

        btn.disabled = true;
        btn.querySelector("i").innerHTML = `<div class="button-spinner"></div>`;
        btn.querySelector("i").className = ''


        try {
          const res = await fetch("/eavedrop", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ targetId }),
          });


          const data = await res.json();


          const allBtns = document.querySelectorAll(`.listen[data-targetid="${targetId}"]`);
          allBtns.forEach((b) => {
            const sp = b.querySelector("span");
            const ic = b.querySelector("i");

            btn.disabled = false;
            ic.innerHTML = ``;

            if (data.status === "added") {
              b.classList.add("listening");
              sp.textContent = "Eavedropping";
              ic.className = "fas fa-ear-listen";
            } else if (data.status === "removed") {
              b.classList.remove("listening");
              sp.textContent = "Eavedrop";
              ic.className = "fas fa-ear-deaf";
            }
          });
        } catch (err) {
          console.error("Eavedrop failed", err);
        }
      });
    </script>


    <script>
      document.querySelector("#real-secrets").addEventListener("click", async (e) => {

        if (e.target.closest(".reaction-btn")) {
          const button = e.target.closest(".reaction-btn")

          const animations = {
            like: './img/lottie/like.json',
            laugh: './img/lottie/laugh.json',
            cry: './img/lottie/cry.json',
            gasp: './img/lottie/gasp.json',
            hot: './img/lottie/hot.json'
          };


          const btn = event.target.closest(".reaction-btn");
          const type = btn.getAttribute("data-type");
          const secretCard = btn.closest(".secret-card");
          const secretId = secretCard.getAttribute("data-id");

          const emojiChar = btn.querySelector(".reaction-icon")?.alt || btn.textContent.trim().split('\n')[0];

          const card = btn.closest('.secret');
          const isAudio = card.dataset.type === "audio";
          const endpoint = isAudio ? `/audio/${secretId}/react` : `/secret/${secretId}/react`;

          // const floatingContainer = card.querySelector('.floating-lottie');
          const floating = document.createElement('div');
          floating.className = 'floating-lottie-animated';
          card.appendChild(floating);


          // === 1. EMOJI BURST AROUND BUTTON ===
          triggerEmojiBurst(btn, emojiChar);

          // === 2. 3D EXTRAS AROUND BUTTON ===
          if (type === 'cry') {
            const tear = document.createElement('span');
            tear.className = 'emoji-particle';
            tear.innerText = '💧';
            tear.style.setProperty('--x', '0px');
            tear.style.setProperty('--y', '50px');
            button.appendChild(tear);
            setTimeout(() => tear.remove(), 800);
          }

          if (type === 'gasp') {
            const puff = document.createElement('span');
            puff.className = 'emoji-particle';
            puff.innerText = '💨';
            puff.style.setProperty('--x', '-10px');
            puff.style.setProperty('--y', '0px');
            button.appendChild(puff);
            setTimeout(() => puff.remove(), 800);
          }


          try {
            const response = await fetch(endpoint, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ type }),
            });

            const data = await response.json();

            const isHot = type === "hot";

            const animation = lottie.loadAnimation({
              container: floating,
              renderer: 'svg',
              loop: false,
              autoplay: true,
              path: animations[type]
            });

            // Get button to card offset
            const buttonRect = button.getBoundingClientRect();
            const cardRect = card.getBoundingClientRect();

            const startX = buttonRect.left - cardRect.left + buttonRect.width / 2;
            const startY = buttonRect.top - cardRect.top + buttonRect.height / 2;

            floating.style.left = `${startX}px`;
            floating.style.top = `${startY}px`;

            if (isHot) {
              floating.classList.add('no-spin');
            } else {

              // 🎇 TRAIL PARTICLES WHILE MOVING
              const trailEmojis = ['✨', '💥', '💨'];
              let trailInterval = setInterval(() => {

                const trail = document.createElement('span');
                trail.className = 'trail-particle';
                trail.innerText = trailEmojis[Math.floor(Math.random() * trailEmojis.length)];

                // Offset from Lottie position
                const offsetX = (Math.random() - 0.5) * 60;
                const offsetY = (Math.random() - 0.5) * 60;

                trail.style.left = `${floating.offsetLeft}px`;
                trail.style.top = `${floating.offsetTop}px`;
                trail.style.setProperty('--trail-x', `${offsetX}px`);
                trail.style.setProperty('--trail-y', `${offsetY}px`);

                card.appendChild(trail);
                setTimeout(() => trail.remove(), 600);
              }, 100);

              // 🎯 Animate to center
              setTimeout(() => {
                floating.classList.add('to-center');
              }, 50);

              // 👋 Animate back and remove
              setTimeout(() => {
                floating.classList.remove('to-center');
                floating.classList.add('to-button');
                clearInterval(trailInterval);
              }, 1200);

              setTimeout(() => {
                floating.remove();
              }, 1800);
            }

            if (data.success) {
              const countSpan = btn.querySelector(".reaction-count");
              const newCount = data.reactions[type].count || 0;
              animateCountBump(countSpan, newCount);
              btn.classList.add("bounce");
              setTimeout(() => btn.classList.remove("bounce"), 300);

              // Use updated count from server
            } else {
              console.error("Failed to update reactions:", data.error);
            }
          } catch (error) {
            console.error("Error updating reactions:", error);
          }

          function animateCountBump(countSpan, newCount) {
            const temp = document.createElement("span");
            temp.className = "reaction-count";
            temp.textContent = newCount;
            temp.style.position = "absolute";
            temp.style.transform = "translateY(100%)";
            temp.style.transition = "transform 0.3s ease";

            const wrapper = countSpan.parentElement;
            wrapper.appendChild(temp);

            requestAnimationFrame(() => {
              countSpan.style.transform = "translateY(-100%)";
              temp.style.transform = "translateY(0%)";
            });

            setTimeout(() => {
              countSpan.remove();
            }, 300);
          }



          function triggerEmojiBurst(container, emojiChar) {
            const burstCount = 20;

            for (let i = 0; i < burstCount; i++) {
              const particle = document.createElement('span');
              particle.classList.add('emoji-particle');
              particle.innerText = emojiChar;

              const angle = Math.random() * 2 * Math.PI;
              const distance = Math.random() * 40 + 20;
              const x = Math.cos(angle) * distance + 'px';
              const y = Math.sin(angle) * distance + 'px';

              particle.style.setProperty('--x', x);
              particle.style.setProperty('--y', y);

              container.appendChild(particle);
              setTimeout(() => particle.remove(), 800);
            }

            container.classList.add('pop-animate');
            setTimeout(() => container.classList.remove('pop-animate'), 300);
          }
        }

          const cardMenuToggle = e.target.closest(".card-toggle-btn")

        if (cardMenuToggle) {
            const menuContent = e.target.closest(".card-menu").querySelector(".card-menu-content");
            const isVisible = menuContent.style.display === "block";

            // Hide all others
            document.querySelectorAll(".card-menu-content").forEach((menu) => {
              menu.style.display = "none";
            });

            // Toggle this one
            menuContent.style.display = isVisible ? "none" : "block";

            e.stopPropagation(); // Prevent auto-close
        }

        const shareBtn = e.target.closest(".share-btn");
        
       if (shareBtn) {
        const card = shareBtn.closest(".card");
    const username = "<%= username %>";
    const link = `https://gossipa.app/gist/abc123?ref=${encodeURIComponent(username)}`;
    const shareModal = card.querySelector(".share-modal")

    card.querySelector(".share-link").value = link;
    card.querySelector(".share-twitter").href =
      `https://twitter.com/intent/tweet?text=${encodeURIComponent("Check out this gist on Gossipa! " + link)}`;
    card.querySelector(".share-whatsApp").href =
      `https://wa.me/?text=${encodeURIComponent("🔥 Check this gist: " + link)}`;
      card.querySelector(".share-snapchat").href =
      `https://snapchat.com/scan?attachmentUrl=${encodeURIComponent("🔥 Check this gist: " + link)}`
    card.querySelector(".share-messenger").href =
      `fb-messenger://share?link=${encodeURIComponent(link)}`;
    
    shareModal.style.display = "flex";
  }

  const closeBtn = e.target.closest(".close-share-modal")

  if (closeBtn) {
     const card = closeBtn.closest(".card");
     const shareModal = card.querySelector(".share-modal")
    shareModal.style.display = "none";
  }


  const shareLink = e.target.closest(".copy-link");

  if(shareLink) {
    const notice = document.getElementById("notification")
    const card = shareLink.closest(".card");
  const input = card.querySelector(".share-link");
  input.select();
  document.execCommand("copy");
  const btn = card.querySelector(".copy-link");
  btn.textContent = "Copied ✅";
  btn.disabled = true;
  notice.innerHTML = `<div class="toast">Link copied! 🎯 Now share it!</div>`;
                setTimeout(() => {
                  notice.innerHTML = ""
                   btn.textContent = "Copy"
                   btn.disabled = false;
                  
                }, 2000);
  }






        const saveToLocal = (postId) => {
          const saved = JSON.parse(localStorage.getItem("bookmarkedPosts") || "[]");
          if (!saved.includes(postId)) {
            saved.push(postId);
            localStorage.setItem("bookmarkedPosts", JSON.stringify(saved));
          }
        };

        const removeFromLocal = (postId) => {
          let saved = JSON.parse(localStorage.getItem("bookmarkedPosts") || "[]");
          saved = saved.filter(id => id !== postId);
          localStorage.setItem("bookmarkedPosts", JSON.stringify(saved));
        };



        const bookmarkBtn = e.target.closest(".bookmark-btn")

        if (bookmarkBtn) {
          const postId = bookmarkBtn.getAttribute("data-id");
          const postType = bookmarkBtn.getAttribute("data-type");
          const notice = document.getElementById("notification");

          try {
            const res = await fetch("/bookmark", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ postId, postType })
            });

            const data = await res.json();
            if (data.success) {

              bookmarkBtn.classList.add("bookmarked");
              saveToLocal(postId);

              if (notice) {
                notice.innerHTML = `<div class="toast">${data.message}</div>`;
                setTimeout(() => (notice.innerHTML = ""), 3000);
              }

            } else {
              if (notice) {
                notice.innerHTML = `<div class="toast">${data.message}</div>`;
                setTimeout(() => (notice.innerHTML = ""), 3000);
              }
            }
          } catch {
            if (notice) {
              notice.innerHTML = `<div class="toast">Failed to bookmark. Try again later.</div>`;
              setTimeout(() => (notice.innerHTML = ""), 3000);
            }
          }
        }


        if (e.target.closest(".card-menu-content")) {
          e.stopPropagation();
        }


        if (e.target.closest(".report-btn")) {
          const btn = e.target.closest(".report-btn")
          const notice = document.getElementById("notification");

          e.stopPropagation(); // Prevent closing menu before prompt

          const secretId = e.target.closest(".report-btn").getAttribute('data-id');
          const reason = prompt('Why are you reporting this content?');

          if (reason) {
            try {
              const response = await fetch(`/report/secret/${secretId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ reason })
              });

              const data = await response.json();
              if (data.success) {
                if (notice) {
                  notice.innerHTML = `<div class="toast">Thank you for reporting. We will review it shortly.</div>`;
                  setTimeout(() => (notice.innerHTML = ""), 3000);
                }

                document.querySelectorAll(".card-menu-content").forEach((menu) => {
                  menu.style.display = "none";
                });
              } else {
                if (notice) {
                  notice.innerHTML = `<div class="toast">Error reporting content</div>`;
                  setTimeout(() => (notice.innerHTML = ""), 3000);
                }
              }
            } catch (error) {
              console.error('Error reporting:', error);
            }
          }
        }

        if (e.target.closest(".read")) {
          const button = e.target.closest(".read")

          const contentSpan = e.target.previousElementSibling;
          const isTruncated = e.target.textContent === "Read More";

          if (isTruncated) {
            // Show full content
            contentSpan.textContent = e.target.dataset.full;
            e.target.textContent = "See Less";
          } else {
            // Reapply truncated content
            contentSpan.textContent = e.target.dataset.truncated;
            e.target.textContent = "Read More";
          }

        }
      })



      // Hide all menus on body click
      document.addEventListener("click", () => {
        document.querySelectorAll(".card-menu-content").forEach((menu) => {
          menu.style.display = "none";
        });
      });

    </script>
    <script>
      // ✅ Restore bookmarks on page load
      window.addEventListener("DOMContentLoaded", () => {
        const saved = JSON.parse(localStorage.getItem("bookmarkedPosts") || "[]");

        document.querySelectorAll(".bookmark-btn").forEach((btn) => {
          const postId = btn.getAttribute("data-id");
          if (saved.includes(postId)) {
            btn.classList.add("bookmarked");
          }
        });
      });
    </script>


    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const parent = document.querySelector("#real-secrets");

        // Bubble for clicks (toggle comment dropdown + translate)
        parent.addEventListener("click", async (e) => {
          // Toggle comment dropdown
          if (e.target.closest("#commentButton")) {
            const section = e.target.closest(".comment-section");
            const dropdown = section.querySelector(".comment-dropdown");
            dropdown.classList.toggle("active");

            const icon = section.querySelector("#commentButton i");
            icon.className = dropdown.classList.contains("active")
              ? "fas fa-comment-slash"
              : "fas fa-comment";
          }

          // Handle Translate Button
          if (e.target.classList.contains("translate-btn")) {
            const btn = e.target;
            const section = btn.closest(".comment-section");
            const postId = section.dataset.postId;
            const text = btn.dataset.text;
            const id = btn.dataset.id;
            const output = section.querySelector(`#translated-${postId}-${id}`);

            output.innerText = "Translating...";

            try {
              const res = await fetch("/translate", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ text, targetLang: "en" }),
              });
              const result = await res.json();
              output.innerText = result.translated || "Translation failed.";
            } catch (err) {
              output.innerText = "Error translating comment.";
            }
          }
        });

        // Bubble for comment form submission
        parent.addEventListener("submit", async (e) => {
          if (e.target.closest("#comment-form")) {
            e.preventDefault();
            const form = e.target;
            const section = form.closest(".comment-section");
            const postType = section.closest(".secret").dataset.type;
            const postId = section.querySelector("#secretId")?.value || section.querySelector("#audioId")?.value;

            const secretUserId = form.querySelector('[name="secretUserId"]').value;
            const commentUserId = form.querySelector('[name="commentUserId"]').value;
            const commentInput = form.querySelector("#commentInput").value;

            const display = section.querySelector(".comment-display");
            const count = section.querySelector(".comment-count");
            const notice = document.getElementById("notification")

            try {
              const res = await fetch(`/comment/${postType}`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  id: postId,
                  secretUserId,
                  commentUserId,
                  comment: commentInput
                }),
              });

              const result = await res.json();

              if (result.success) {
                const commentsRes = await fetch(`/comment/${postType}/${postId}`);
                const data = await commentsRes.json();
                const comments = data.comments || [];



                display.innerHTML = `<p class="total">All comments: ${data.totalComments}</p>`;

                display.innerHTML += comments.map(comment => {
                  const stealthMode = comment.stealth_mode ? `@gossipa${comment.user_id}` : "@" + comment.username;
                  const verifiedBadge = comment.verified ? `<img oncontextmenu="return false;" src="/img/gossipa3.png" alt="Verified Badge" class="verified-badge">`
                    : "";

                  `
          <li class="comment-item">
            <div>
              <small class="user">
                <strong class="">${stealthMode}</strong>
                ${verifiedBadge}
                </small>
              <p class="comment">${comment.comment}</p>
            </div>
            <button type="button" class="translate-btn" data-id="${comment.id}" data-text="${comment.comment}">Translate to english</button>
            <p class="translated-text" id="translated-${postId}-${comment.id}"></p>
          </li>
        `
                }).join("");


                count.textContent = data.totalComments;
                form.querySelector("#commentInput").value = "";
              } else {
                if (notice) {
                  notice.innerHTML = `<div class="toast">Failed to post comment</div>`;
                  setTimeout(() => (notice.innerHTML = ""), 3000);
                }
              }
            } catch (err) {
              console.error(err);
              if (notice) {
                notice.innerHTML = `<div class="toast">Error posting comment</div>`;
                setTimeout(() => (notice.innerHTML = ""), 3000);
              }
            }
          }
        });
      });
    </script>


  </section>



  <aside class="right-sidebar">
    <div class="aside-2">
      <ul class="navigator">
        <li class="nav-item current">Trending <span></span></li>
        <li class="nav-item">Hot <span> </span></li>
        <li class="nav-item">Loud <span> </span></li>
      </ul>
    </div>


    <div class="aside-2">
      <center>
        <h4 class="user-count"><button class="dot active animate-ping-once" data-slide="0"></button>&nbsp;Eavedropping
          :<span id="activeCount">0</span></h4>
      </center>
      <ul class="nav user-list">
      </ul>

    </div>


    <div class="inpage-footer">
      <span>Privacy Policy</span>&nbsp;.
      &nbsp;<span>Terms of use</span> &nbsp;.
      &nbsp;<span>Community guidelines</span> &nbsp;.
      <br><br>
      &nbsp;<span>&copy; <%= new Date().getFullYear() %>, &commat; Gossipa Co. All rights reserved</span>
    </div>
  </aside>

</div>


<script src="https://unpkg.com/lottie-web@5.10.0/build/player/lottie.min.js"></script>
<!-- Load Day.js and the plugin via CDN -->
<script src="https://cdn.jsdelivr.net/npm/dayjs@1/dayjs.min.js"></script>


<script>
  document.addEventListener("DOMContentLoaded", () => {
    const connectedUsersMap = new Map();
    const userList = document.querySelector(".user-list");
    const userCountDisplay = document.getElementById("activeCount");

    function updateUserCount() {
      if (userCountDisplay) userCountDisplay.textContent = connectedUsersMap.size;
    }

    function userConnected(user) {
      if (connectedUsersMap.has(user.id)) return;

      const userBox = document.createElement("li");
      userBox.className = "connected-user nav-item enter";
      userBox.id = `user-${user.id}`;

      const verifiedBadge = user.verified
        ? `<img oncontextmenu="return false;" src="/img/gossipa3.png" alt="Verified Badge" class="verified-badge">`
        : "";

      const stealthMode = user.stealth_mode ? `@gossipa${user.id}` : `@${user.username}`

      userBox.innerHTML = `
              <div class="user-card" style="display: flex; align-items: center; gap: 10px;">
                <img oncontextmenu="return false;" src="${user.profile_picture}" alt="Avatar" class="profile-pic" style="width: 32px; height: 32px; border-radius: 50%;">
                <p class="username">
                  <span class="user">${stealthMode}</span>
                  ${verifiedBadge}
                </p>
              </div>
            `;

      userList?.appendChild(userBox);
      connectedUsersMap.set(user.id, userBox);
      updateUserCount();

      requestAnimationFrame(() => userBox.classList.add("enter"));
    }

    function userDisconnected(userId) {
      const userBox = connectedUsersMap.get(userId);
      if (userBox) {
        userBox.classList.add("exit");
        userBox.classList.remove("enter");
        setTimeout(() => {
          userBox.remove();
          connectedUsersMap.delete(userId);
          updateUserCount();
        }, 400);
      }
    }

    if (window.socket) {
      window.socket.on("userJoined", async (userId) => {
        try {
          const res = await fetch(`/user/${userId}`);
          const user = await res.json();
          userConnected(user);
        } catch (err) {
          console.error("Failed to fetch user data:", err);
        }
      });

      window.socket.on("userLeft", (userId) => {
        userDisconnected(userId);
      });
    } else {
      console.warn("Socket.io not initialized on this page.");
    }

    // Load currently active users
    fetch("/active-users")
      .then(res => res.json())
      .then(users => users.forEach(userConnected))
      .catch(console.error);
  });
</script>

<script>
  dayjs.extend(window.dayjs_plugin_relativeTime);

  document.querySelectorAll('.timestamp').forEach((timeElem) => {
    const rawTimestamp = timeElem.getAttribute('data-raw');
    if (rawTimestamp) {
      const formatted = dayjs(rawTimestamp).fromNow();
      timeElem.textContent = formatted;
    }
  });
</script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    // Simulate a short loading delay (optional)
    setTimeout(() => {
      // Hide shimmer placeholder
      document.querySelectorAll(".shimmer-container").forEach(shimmer => {
        shimmer.style.display = "none";
      })
      // Show real secrets
      document.getElementById("real-secrets").style.display = "block";
      document.querySelector(".real-secrets").style.display = "flex";
    }, 1000); // 1s delay – tweak as needed
  });
</script>



<script src="/js/app.js"></script>
<script src="/js/tutorial.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/lottie-web/5.12.0/lottie.min.js"></script>