
<style>
  
  #pinned-secret {
      width: 100% !important;
    }

    .pin-card .card {
      padding: .5rem !important;
    }

  .pin-card::after {
      display: none;
    }

  #gift-container {
      position: relative;
      display: flex;
      justify-content: center;
      align-items: center;
      width: 200px;
      height: 200px;
  }

  /* Neon Rays Effect */
  #neon-rays {
      position: absolute;
      width: 250px;
      height: 250px;
      background: radial-gradient(circle, rgba(255, 0, 255, 0.6) 10%, rgba(0, 255, 255, 0.3) 60%, transparent 100%);
      border-radius: 50%;
      filter: blur(25px);
      opacity: 0;
      transition: opacity 0.5s ease-in-out, transform 0.5s ease-in-out;
  }

  /* Gift Box Image */
  #gift-img {
      width: 150px;
      cursor: pointer;
  }

  /* Animation when gift is opened */
  .open-box {
      transform: scale(1.1);
      animation: shake 0.6s ease-in-out;
  }

  /* Keyframe for shaking effect */
  @keyframes shake {
      0% { transform: translateY(0); }
      25% { transform: translateY(-5px); }
      50% { transform: translateY(5px); }
      75% { transform: translateY(-3px); }
      100% { transform: translateY(0); }
  }

  /* Keyframe for Neon Glow */
  @keyframes neonGlow {
      0% { opacity: 0; transform: scale(0.8); }
      50% { opacity: 1; transform: scale(1.2); }
      100% { opacity: 0; transform: scale(1.5); }
  }

  .glow-effect {
      animation: neonGlow 1.2s ease-out;
  }


/* Apply your shake & jump animation class */
.animated-box {
    animation: your-animation 1s ease-in-out;
}

/* Secret Card Styles */
#secret-card {
    display: none;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(0.6);
    width: 320px;
    padding: 20px;
    background: white;
    border-radius: 10px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    opacity: 0;
    transition: opacity 0.5s ease-in-out, transform 0.5s ease-in-out;
    z-index: 100;
}

/* Active State (pops up) */
.show-secret {
    display: block;
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
}

/* Overlay Background */
#overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
    z-index: 90;
}

/* Close Button */
#close-secret {
    position: absolute;
    top: 10px;
    right: 10px;
    background: transparent;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: #555;
}

.shimmer-wrapper {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      /* padding: 1rem; */
    }

    .shimmer-card {
      display: flex;
      background: var(--container-bg);
      border-radius: 10px;
      overflow: hidden;
      animation: pulse 1.5s infinite;
    }

    .shimmer-avatar {
      width: 50px;
      height: 50px;
      background: var(--body-bg);
      border-radius: 50%;
      margin: 1rem;
    }



    .shimmer-lines {
      flex: 1;
      padding: 1rem 0;
    }

    .shimmer-line {
      height: 10px;
      background: var(--body-bg);
      margin: 8px 0;
      border-radius: 5px;
    }

    .shimmer-line.short {
      width: 50%;
    }

    .shimmer-footer {
      display: flex;
      gap: 1rem;
      margin-top: 1rem;
    }

    .shimmer-btn {
      width: 40px;
      height: 20px;
      background: var(--body-bg);
      border-radius: 5px;
    }

    @keyframes pulse {
      0% {
        background-color: var(--container-bg);
      }

      50% {
        background-color: var(--body-bg);
      }

      100% {
        background-color: var(--container-bg);
      }
    }

    .shimmer {
      background: linear-gradient(90deg, var(--container-bg) 25%, var(--body-bg) 50%, var(--container-bg) 75%);
      background-size: 200% 100%;
      animation: shimmer 1.5s infinite;
    }

    @keyframes shimmer {
      0% {
        background-position: -200% 0;
      }

      100% {
        background-position: 200% 0;
      }
    }

    .secret .card {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      padding: 1.5rem !important;
      background: var(--container-bg);
      border-radius: 1.5rem;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      position: relative;
    }

    .card-header {
      display: flex;
      align-items: center;
      gap: 1rem;
    }


    .profile-pic {
      width: 100%;
      height: 100%;
      object-fit: contain;
      display: block;
      z-index: 0;
    }


.card-content p {
      font-family: "Gloria Hallelujah", cursive;
      font-size: 1.1rem;
      line-height: 1.6;
      margin: 0 !important;
    }

    .reactions.sleek {
      display: flex;
      justify-content: space-between;
    }

    .reaction-btn {
      display: inline-flex;
      align-items: center;
      gap: 6px;
      background: var(--body-bg);
      border: none;
      border-radius: 30px;
      padding: 0.4rem 0.9rem;
      font-size: 0.9rem;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .reaction-btn:hover {
      background: var(--container-bg);
      transform: scale(1.05);
    }

    .reaction-count {
      font-weight: bold;
      color: var(--text-color);
    }
</style>

  
  <form id="pinned-secret" method="GET"  style="margin-bottom: 20px !important; text-align: center; width: 100%;" ></form>
      <div id="main">

        


        <section class="main">
          
  <div class="jumbotron text-center">
    <div class=" container">
      <!-- <i class="fas fa-key fa-6x"></i> -->

      <!-- <center>
        <h1 class="display-3">You've Pocknosed a Gist Amebo!</h1>
        <p>Don't kiss and tell</p>
      </center> -->


      <% if (locals.secret) { %>
        <ul id="real-secrets">
          <!-- <h2>Secret</h2> -->
           <!-- <br> -->
          <li class="secret">
            <div class="card">
            
              <% if (secret.category=="funny" ) { %>
                <span class="tag funny"><i class="fas fa-laugh"></i></span>
                <% } else if (secret.category=="love" ) { %>
                  <span class="tag love"><i class="fas fa-heart"></i></span>
                  <% } else if (secret.category=="nasty" ) { %>
                    <span class="tag nasty"><i class="fas fa-skull-crossbones"></i></span>
                    <% } else if (secret.category=="sassy" ) { %>
                      <span class="tag sassy"><i class="fas fa-face-meh"></i></span>
                      <% } else if (secret.category=="hilarious" ) { %>
                        <span class="tag hilarious"><i class="fas fa-teeth-open"></i></span>
                        <% } else if (secret.category=="random" ) { %>
                          <span class="tag random"><i class="fas fa-shuffle"></i></span>
                          <% } else { %>
                            <span class="tag random"><i class="fas fa-shuffle"></i></span>
                            <% } %>



              <div class="card-header">
                              <div class="user-details header<%= secret.user_id %>">
                                <a href=<%=secret.user_id===userId ? '/profile' : '/profile/amebo/' + secret.user_id %>
                                  class="avatar-profile"><img oncontextmenu="return false;"
                                    src="../.<%= secret.profile_picture %>" alt="Profile Picture" class="profile-pic"></a>
                                <div class="user-info">
                                  <a href=<%=secret.user_id===userId ? '/profile' : '/profile/amebo/' + secret.user_id %>>
                                    <p class="username user<%= secret.user_id %>">
                                      <span class="user">@gossipa<%= secret.user_id %></span>
                                      <% if(secret.verified===true) {%>
                                        <abbr title="Exclusive Membership"> <img oncontextmenu="return false;"
                                            src="../../img/gossipa3.png" alt="" class="verified-badge"></abbr>
                                        <% } else {%>

                                          <% } %>
                                    </p>

                                  </a>
                                  <span class="timestamp" data-raw="<%= secret.timestamp %>"></span>
                                </div>
                                <span class="you-live-badge hidden">üéôÔ∏èLive</span>
                                <span id="streamEndedNotice" class="badge ended hidden">Stream Ended ‚úì</span>
                              </div>
                              <% if(userId !== secret.user_id) {%>
                                <button data-targetid="<%= secret.user_id %>" class="listen"><i
                                    class="fas fa-ear-deaf"></i>&nbsp;<span>Eavedrop</span></button>
                                <% } else { %>
                                  <button class="listen listening">Visit profile</button>
                                  <% } %>
                            </div>


              <div class="card-content">
                <p>
                  <span class="content">
                        <%= secret.secret %>
                  </span>

<button
class=" read" style="
background: none;
font-size: 1rem;
padding: 0;
font-weight: bold;
padding: .75rem !important;
font-weight: bold;
font-family: 'Courier New', Courier, monospace !important;
" data-full="<%= secret.secret %>" data-truncated="<%= secret.secret.substring(0, 250) + '...' %>">
                    See Less
                    </button>

                </p>
              </div>

              <div class="comment-section" data-post-id="<%= secret.id %>" data-type="<%= secret.type %>">

                              <div class="reactions sleek">
                                <div class="first-action">
                                  <div class="secret-card" data-id="<%= secret.id %>">
                                    <div class="reaction">
                                      <button class="reaction-btn " data-type="hot">
                                        <!-- <div id="gasp-animation" class="lottie-animation"></div> -->
                                        <img oncontextmenu="return false;" src="../../img/premium-reaction.png" alt="üî•"
                                          class="premium-reaction">

                                        <div class="reaction-class-wrapper">
                                          <span class="reaction-count none">
                                            <%= secret.reactions.hot ? secret.reactions.hot.count : 0 %>
                                          </span>
                                        </div>
                                      </button>

                                      <button class="reaction-btn " data-type="like">
                                        <!-- <div id="like-animation" class="lottie-animation"></div> -->
                                        üëç
                                        <div class="reaction-class-wrapper">


                                          <span class="reaction-count none">
                                            <%= secret.reactions.like ? secret.reactions.like.count : 0 %>
                                          </span>
                                        </div>
                                      </button>

                                      <button class="reaction-btn " data-type="laugh">
                                        <!-- <div id="laugh-animation" class="lottie-animation"></div> -->

                                        üòÇ
                                        <div class="reaction-class-wrapper">

                                          <span class="reaction-count none">
                                            <%= secret.reactions.laugh ? secret.reactions.laugh.count : 0 %>
                                          </span>
                                        </div>

                                      </button>

                                      <!-- <button class="reaction-btn " data-type="cry">

                                                        üò¢
                                                        <div class="reaction-class-wrapper">

                                                        <span class="reaction-count none">
                                                          <%= secret.reactions.cry ? secret.reactions.cry.count : 0 %>
                                                        </span>
                                                        </div>
                                                        
                                                      </button> -->

                                      <button class="reaction-btn " data-type="gasp">
                                        <!-- <div id="gasp-animation" class="lottie-animation"></div> -->
                                        üò±
                                        <div class="reaction-class-wrapper">

                                          <span class="reaction-count none">
                                            <%= secret.reactions.gasp ? secret.reactions.gasp.count : 0 %>
                                          </span>
                                        </div>

                                      </button>

                                    </div>

                                  </div>

                                  <button id="commentButton"><i class="fas fa-comment"></i><span
                                      class="comment-count"></span>
                                  </button>
                                </div>

                                <ul class="second-action">
                                  <li>
                                    <abbr title="Bookmark">
                                      <button class="bookmark-btn" data-id="<%= secret.id %>"
                                        data-type="<%= secret.type %>">
                                        <i class="fas fa-bookmark"></i>
                                      </button>
                                    </abbr>
                                  </li>

                                  <li class=" md-none">
                                    <button class="copy-btn  md-none">
                                      <abbr title="Copy"><i class="fas fa-copy"></i></abbr>
                                    </button>
                                  </li>
                                </ul>

                              </div>

                              <div class="comment-dropdown" id="commentDropdown">
                                <form class="comment-display" method="secret" id="commentDisplay">
                                  <ul id="comments" class="comments-list"></ul>
                                </form>

                                <form action="/comment" method="POST" id="comment-form">
                                  <input type="hidden" name="id" id="secretId" value="<%= secret.id %>" />
                                  <input type="hidden" name="secretUserId" value="<%= secret.user_id %>" />
                                  <input type="hidden" name="commentUserId" value="<%= userId %>" />
                                  <textarea id="commentInput" placeholder="Write a comment..."
                                    name="comment"></textarea>
                                  <!-- <input type="text" id="commentInput" placeholder="Write a comment" name="comment"> -->
                                  <button id="secretCommentButton">
                                    <!-- secret -->
                                    <i class="fas fa-paper-plane"></i>
                                  </button>
                                  <% if (locals.message) { %>
                                    <small>
                                      <%= message %>
                                    </small>
                                    <% } %>
                                </form>

                              </div>
                            </div>


                            <ul class="card-menu">
                              <li>
                                <button class="card-toggle-btn"><i class="fas fa-ellipsis-vertical"></i></button>
                                <ul class="card-menu-content" style="display: none;">
                                  <li>
                                    <button class="report-btn" data-id="<%= secret.id %>">
                                      <i class="fa-regular fa-flag"></i>Report
                                    </button>
                                  </li>
                                  <li>
                                    <button class="copy-btn">
                                      <i class="fas fa-copy">Copy</i>
                                    </button>
                                  </li>
                                </ul>
                              </li>
                            </ul>

                          </div>
          </li>
        </ul>
        <% } %>
        <br>

        <a href="/submit"  style="margin-left: .5rem !important;" class="nav-link btn btn-dark secret-btn" role="button">Share a Gist</a>

   <script>
      document.querySelectorAll('.nav-link').forEach(link => {
        link.addEventListener('click', function(e) {
          e.preventDefault();
          showBrandLogo();
    
          setTimeout(() => {
            window.location.href = this.href;
          }, 2400); // give animation time to play
        });
      });
    </script>
    
        <hr style="margin-top: 2rem; opacity: 0 !important;">
 

    </div>
  </div>
  
</section>


<aside class="right-sidebar">
  <div class="aside premium-aside">
      <div class="premium-card">
        <div class="crown-icon sparkle">üëë</div>
    
        <h3 class="premium-title">Become a Chief Gossipa</h3>
        <p class="premium-text">Stand out in the World of anonymity. Get Heard. Remain unknown.</p>
    
        <div class="trending-stats">
          <span>üî• Trending Now: <strong>152</strong> Gissipas</span>
        </div>
    
        <div class="avatar-hint">
          <img src="/img/avatars/thumbs/dog.jpg" alt="Anonymous" class="blur-avatar" />
          <p>You‚Äôre 1 step from <strong>trending</strong>‚Ä¶</p>
        </div>
    
        <a href="/subscribe" class="premium-btn">Unlock Premium</a>
      </div>
    </div>
      
    <div class="aside aside-2">
      <center>
        <h4 class="user-count"><button class="dot active animate-ping-once" data-slide="0"></button>&nbsp;Active Gossipas: <span id="activeCount">0</span></h4>
      </center>
      <ul class="nav user-list">
      </ul>

    </div>

</aside>

</div>



<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", () => {
      const connectedUsersMap = new Map();
      const userList = document.querySelector(".user-list");
      const userCountDisplay = document.getElementById("activeCount");

      function updateUserCount() {
        if (userCountDisplay) userCountDisplay.textContent = connectedUsersMap.size;
      }

      function userConnected(user) {
        if (connectedUsersMap.has(user.id)) return;

        const userBox = document.createElement("li");
        userBox.className = "connected-user nav-item enter";
        userBox.id = `user-${user.id}`;

        const verifiedBadge = user.verified
          ? `<img oncontextmenu="return false;" src="/img/gossipa3.png" alt="Verified Badge" class="verified-badge">`
          : "";

        userBox.innerHTML = `
              <div class="user-card" style="display: flex; align-items: center; gap: 10px;">
                <img oncontextmenu="return false;" src="../.${user.profile_picture}" alt="Avatar" class="profile-pic" style="width: 32px; height: 32px; border-radius: 50%;">
                <p class="username">
                  <span class="user">@amebo${user.id}</span>
                  ${verifiedBadge}
                </p>
              </div>
            `;

        userList?.appendChild(userBox);
        connectedUsersMap.set(user.id, userBox);
        updateUserCount();

        requestAnimationFrame(() => userBox.classList.add("enter"));
      }

      function userDisconnected(userId) {
        const userBox = connectedUsersMap.get(userId);
        if (userBox) {
          userBox.classList.add("exit");
          userBox.classList.remove("enter");
          setTimeout(() => {
            userBox.remove();
            connectedUsersMap.delete(userId);
            updateUserCount();
          }, 400);
        }
      }

      if (window.socket) {
        window.socket.on("userJoined", async (userId) => {
          try {
            const res = await fetch(`/eavedrop-status/${userId}`);
            const user = await res.json();
            userConnected(user);
          } catch (err) {
            console.error("Failed to fetch user data:", err);
          }
        });

        window.socket.on("userLeft", (userId) => {
          userDisconnected(userId);
        });
      } else {
        console.warn("Socket.io not initialized on this page.");
      }

      // Load currently active users
      fetch("/active-users")
        .then(res => res.json())
        .then(users => users.forEach(userConnected))
        .catch(console.error);
    });
  </script>

  <script>

      window.onload = function () {
          const textArea = document.querySelector('textarea')
          textArea.blur();
      }


      function changeBg(event) {
          event.target.style.background = "var(--secondary-color)"
          event.target.style.border = "1px solid var(--primary-color)"
      }

  </script>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
        fetch("/api/comment-counts")
            .then(res => res.json())
            .then(counts => {
                Object.entries(counts).forEach(([secretId, count]) => {
                    const el = document.querySelector(`[data-secret-id="${secretId}"] .comment-count`);
                    if (count) {
                        // el.textContent = `${count} comment${count !== 1 ? 's' : ''}`;
                        el.textContent = `${count}`;
                    } 
                });
            })
            .catch(err => console.error("Failed to fetch comment counts", err));
    });
    </script>
  <script>
        async function initEavedropStatus() {
          try {
            const eavedroppingIds = await fetch("/my-eavedrops").then(res => res.json());
            eavedroppingIds.forEach(id => {
              const buttons = document.querySelectorAll(`.listen[data-targetid="${id}"]`);
              buttons.forEach(btn => {
                btn.classList.add("listening");
                btn.querySelector("span").textContent = "Eavedropping";
                btn.querySelector("i").className = "fas fa-ear-listen";
              });
            });
          } catch (err) {
            console.error("Error loading eavedrop state", err);
          }
        }

        document.addEventListener("DOMContentLoaded", initEavedropStatus);

      </script>

<script>
        document.addEventListener("click", async (e) => {
      const btn = e.target.closest(".listen");
      if (!btn) return;

      if(btn.textContent === "Visit profile"){
        window.href = "/profile"
      }

      const span = btn.querySelector("span");
      const icon = btn.querySelector("i");
      const targetId = btn.dataset.targetid;

       btn.disabled = true;
     btn.querySelector("i").innerHTML = `<div class="button-spinner"></div>`;
     btn.querySelector("i").className = ''
     

      try {
      const res = await fetch("/eavedrop", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ targetId }),
      });

      
      const data = await res.json();


      const allBtns = document.querySelectorAll(`.listen[data-targetid="${targetId}"]`);
      allBtns.forEach((b) => {
      const sp = b.querySelector("span");
      const ic = b.querySelector("i");

       btn.disabled = false;
     ic.innerHTML = ``;

      if (data.status === "added") {
      b.classList.add("listening");
      sp.textContent = "Eavedropping";
      ic.className = "fas fa-ear-listen";
      } else if (data.status === "removed") {
      b.classList.remove("listening");
      sp.textContent = "Eavedrop";
      ic.className = "fas fa-ear-deaf";
      }
      });
      } catch (err) {
      console.error("Eavedrop failed", err);
      }
      });
</script>


      <script>
        document.querySelector("#real-secrets").addEventListener("click", async (e) => {

          if (e.target.closest(".reaction-btn")) {
            const button = e.target.closest(".reaction-btn")

            const animations = {
              like: './img/lottie/like.json',
              laugh: './img/lottie/laugh.json',
              cry: './img/lottie/cry.json',
              gasp: './img/lottie/gasp.json',
              hot: './img/lottie/hot.json'
            };


            const btn = event.target.closest(".reaction-btn");
            const type = btn.getAttribute("data-type");
            const secretCard = btn.closest(".secret-card");
            const secretId = secretCard.getAttribute("data-id");

            const emojiChar = btn.querySelector(".reaction-icon")?.alt || btn.textContent.trim().split('\n')[0];

            const card = btn.closest('.secret');
            const isAudio = card.dataset.type === "audio";
            const endpoint = isAudio ? `/audio/${secretId}/react` : `/secret/${secretId}/react`;

            // const floatingContainer = card.querySelector('.floating-lottie');
            const floating = document.createElement('div');
            floating.className = 'floating-lottie-animated';
            card.appendChild(floating);


            // === 1. EMOJI BURST AROUND BUTTON ===
            triggerEmojiBurst(btn, emojiChar);

            // === 2. 3D EXTRAS AROUND BUTTON ===
            if (type === 'cry') {
              const tear = document.createElement('span');
              tear.className = 'emoji-particle';
              tear.innerText = 'üíß';
              tear.style.setProperty('--x', '0px');
              tear.style.setProperty('--y', '50px');
              button.appendChild(tear);
              setTimeout(() => tear.remove(), 800);
            }

            if (type === 'gasp') {
              const puff = document.createElement('span');
              puff.className = 'emoji-particle';
              puff.innerText = 'üí®';
              puff.style.setProperty('--x', '-10px');
              puff.style.setProperty('--y', '0px');
              button.appendChild(puff);
              setTimeout(() => puff.remove(), 800);
            }


            try {
              const response = await fetch(endpoint, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ type }),
              });

              const data = await response.json();

              const isHot = type === "hot";

              const animation = lottie.loadAnimation({
                container: floating,
                renderer: 'svg',
                loop: false,
                autoplay: true,
                path: animations[type]
              });

              // Get button to card offset
              const buttonRect = button.getBoundingClientRect();
              const cardRect = card.getBoundingClientRect();

              const startX = buttonRect.left - cardRect.left + buttonRect.width / 2;
              const startY = buttonRect.top - cardRect.top + buttonRect.height / 2;

              floating.style.left = `${startX}px`;
              floating.style.top = `${startY}px`;

              if (isHot) {
                floating.classList.add('no-spin');
              } else {

                // üéá TRAIL PARTICLES WHILE MOVING
                const trailEmojis = ['‚ú®', 'üí•', 'üí®'];
                let trailInterval = setInterval(() => {

                  const trail = document.createElement('span');
                  trail.className = 'trail-particle';
                  trail.innerText = trailEmojis[Math.floor(Math.random() * trailEmojis.length)];

                  // Offset from Lottie position
                  const offsetX = (Math.random() - 0.5) * 60;
                  const offsetY = (Math.random() - 0.5) * 60;

                  trail.style.left = `${floating.offsetLeft}px`;
                  trail.style.top = `${floating.offsetTop}px`;
                  trail.style.setProperty('--trail-x', `${offsetX}px`);
                  trail.style.setProperty('--trail-y', `${offsetY}px`);

                  card.appendChild(trail);
                  setTimeout(() => trail.remove(), 600);
                }, 100);

                // üéØ Animate to center
                setTimeout(() => {
                  floating.classList.add('to-center');
                }, 50);

                // üëã Animate back and remove
                setTimeout(() => {
                  floating.classList.remove('to-center');
                  floating.classList.add('to-button');
                  clearInterval(trailInterval);
                }, 1200);

                setTimeout(() => {
                  floating.remove();
                }, 1800);
              }

              if (data.success) {
                const countSpan = btn.querySelector(".reaction-count");
                const newCount = data.reactions[type].count || 0;
                animateCountBump(countSpan, newCount);
                btn.classList.add("bounce");
                setTimeout(() => btn.classList.remove("bounce"), 300);

                // Use updated count from server
              } else {
                console.error("Failed to update reactions:", data.error);
              }
            } catch (error) {
              console.error("Error updating reactions:", error);
            }

            function animateCountBump(countSpan, newCount) {
              const temp = document.createElement("span");
              temp.className = "reaction-count";
              temp.textContent = newCount;
              temp.style.position = "absolute";
              temp.style.transform = "translateY(100%)";
              temp.style.transition = "transform 0.3s ease";

              const wrapper = countSpan.parentElement;
              wrapper.appendChild(temp);

              requestAnimationFrame(() => {
                countSpan.style.transform = "translateY(-100%)";
                temp.style.transform = "translateY(0%)";
              });

              setTimeout(() => {
                countSpan.remove();
              }, 300);
            }



            function triggerEmojiBurst(container, emojiChar) {
              const burstCount = 20;

              for (let i = 0; i < burstCount; i++) {
                const particle = document.createElement('span');
                particle.classList.add('emoji-particle');
                particle.innerText = emojiChar;

                const angle = Math.random() * 2 * Math.PI;
                const distance = Math.random() * 40 + 20;
                const x = Math.cos(angle) * distance + 'px';
                const y = Math.sin(angle) * distance + 'px';

                particle.style.setProperty('--x', x);
                particle.style.setProperty('--y', y);

                container.appendChild(particle);
                setTimeout(() => particle.remove(), 800);
              }

              container.classList.add('pop-animate');
              setTimeout(() => container.classList.remove('pop-animate'), 300);
            }
          }

          if (e.target.closest(".card-toggle-btn")) {
            const button = e.target.closest(".card-toggle-btn")
            button.addEventListener("click", (e) => {
              const menuContent = e.target.closest(".card-menu").querySelector(".card-menu-content");
              const isVisible = menuContent.style.display === "block";

              // Hide all others
              document.querySelectorAll(".card-menu-content").forEach((menu) => {
                menu.style.display = "none";
              });

              // Toggle this one
              menuContent.style.display = isVisible ? "none" : "block";

              e.stopPropagation(); // Prevent auto-close
            });

          }

          const copyBtn = e.target.closest(".fas.fa-copy");
          if (copyBtn) {
            const card = copyBtn.closest(".card");
            const content = card.querySelector(".content")?.innerText;
            const notice = document.getElementById("notification");

            if (!content) return notice.innerHTML = `<div class="toast">Nothing to copy.</div>`;
            setTimeout(() => (notice.innerHTML = ""), 3000);

            try {
              if (navigator.clipboard?.writeText) {
                await navigator.clipboard.writeText(content);
                if (notice) {
                  notice.innerHTML = `<div class="toast">Content copied to clipboard!</div>`;
                  setTimeout(() => (notice.innerHTML = ""), 3000);
                }
              } else {
                // Fallback
                const textarea = document.createElement("textarea");
                textarea.value = content;
                document.body.appendChild(textarea);
                textarea.select();
                document.execCommand("copy");
                document.body.removeChild(textarea);
                if (notice) {
                  notice.innerHTML = `<div class="toast">Content copied</div>`;
                  setTimeout(() => (notice.innerHTML = ""), 3000);
                }
              }
            } catch (err) {
              console.error("Copy failed:", err);
              if (notice) {
                notice.innerHTML = `<div class="toast">Failed to copy.</div>`;
                setTimeout(() => (notice.innerHTML = ""), 3000);
              }
            }
          }



          const saveToLocal = (postId) => {
            const saved = JSON.parse(localStorage.getItem("bookmarkedPosts") || "[]");
            if (!saved.includes(postId)) {
              saved.push(postId);
              localStorage.setItem("bookmarkedPosts", JSON.stringify(saved));
            }
          };

          const removeFromLocal = (postId) => {
            let saved = JSON.parse(localStorage.getItem("bookmarkedPosts") || "[]");
            saved = saved.filter(id => id !== postId);
            localStorage.setItem("bookmarkedPosts", JSON.stringify(saved));
          };



          const bookmarkBtn = e.target.closest(".bookmark-btn")

          if (bookmarkBtn) {
            const postId = bookmarkBtn.getAttribute("data-id");
            const postType = bookmarkBtn.getAttribute("data-type");
            const notice = document.getElementById("notification");

            try {
              const res = await fetch("/bookmark", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ postId, postType })
              });

              const data = await res.json();
              if (data.success) {

                bookmarkBtn.classList.add("bookmarked");
                saveToLocal(postId);

                if (notice) {
                  notice.innerHTML = `<div class="toast">${data.message}</div>`;
                  setTimeout(() => (notice.innerHTML = ""), 3000);
                }

              } else {
                if (notice) {
                  notice.innerHTML = `<div class="toast">${data.message}</div>`;
                  setTimeout(() => (notice.innerHTML = ""), 3000);
                }
              }
            } catch {
              if (notice) {
                notice.innerHTML = `<div class="toast">Failed to bookmark. Try again later.</div>`;
                setTimeout(() => (notice.innerHTML = ""), 3000);
              }
            }
          }


          if (e.target.closest(".card-menu-content")) {
            e.stopPropagation();
          }


          if (e.target.closest(".report-btn")) {
            const btn = e.target.closest(".report-btn")
            const notice = document.getElementById("notification");

            e.stopPropagation(); // Prevent closing menu before prompt

            const secretId = e.target.closest(".report-btn").getAttribute('data-id');
            const reason = prompt('Why are you reporting this content?');

            if (reason) {
              try {
                const response = await fetch(`/report/secret/${secretId}`, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({ reason })
                });

                const data = await response.json();
                if (data.success) {
                  if (notice) {
                    notice.innerHTML = `<div class="toast">Thank you for reporting. We will review it shortly.</div>`;
                    setTimeout(() => (notice.innerHTML = ""), 3000);
                  }

                  document.querySelectorAll(".card-menu-content").forEach((menu) => {
                    menu.style.display = "none";
                  });
                } else {
                  if (notice) {
                    notice.innerHTML = `<div class="toast">Error reporting content</div>`;
                    setTimeout(() => (notice.innerHTML = ""), 3000);
                  }
                }
              } catch (error) {
                console.error('Error reporting:', error);
              }
            }
          }

          if (e.target.closest(".read")) {
            const button = e.target.closest(".read")

            const contentSpan = e.target.previousElementSibling;
            const isTruncated = e.target.textContent === "Read More";

            if (isTruncated) {
              // Show full content
              contentSpan.textContent = e.target.dataset.full;
              e.target.textContent = "See Less";
            } else {
              // Reapply truncated content
              contentSpan.textContent = e.target.dataset.truncated;
              e.target.textContent = "Read More";
            }

          }
        })



        // Hide all menus on body click
        document.addEventListener("click", () => {
          document.querySelectorAll(".card-menu-content").forEach((menu) => {
            menu.style.display = "none";
          });
        });
      </script>
      <script>
        // ‚úÖ Restore bookmarks on page load
        window.addEventListener("DOMContentLoaded", () => {
          const saved = JSON.parse(localStorage.getItem("bookmarkedPosts") || "[]");

          document.querySelectorAll(".bookmark-btn").forEach((btn) => {
            const postId = btn.getAttribute("data-id");
            if (saved.includes(postId)) {
              btn.classList.add("bookmarked");
            }
          });
        });
      </script>


      <script>
        document.addEventListener("DOMContentLoaded", () => {
          const parent = document.querySelector("#real-secrets");

          // Bubble for clicks (toggle comment dropdown + translate)
          parent.addEventListener("click", async (e) => {
            // Toggle comment dropdown
            if (e.target.closest("#commentButton")) {
              const section = e.target.closest(".comment-section");
              const dropdown = section.querySelector(".comment-dropdown");
              dropdown.classList.toggle("active");

              const icon = section.querySelector("#commentButton i");
              icon.className = dropdown.classList.contains("active")
                ? "fas fa-comment-slash"
                : "fas fa-comment";
            }

            // Handle Translate Button
            if (e.target.classList.contains("translate-btn")) {
              const btn = e.target;
              const section = btn.closest(".comment-section");
              const postId = section.dataset.postId;
              const text = btn.dataset.text;
              const id = btn.dataset.id;
              const output = section.querySelector(`#translated-${postId}-${id}`);

              output.innerText = "Translating...";

              try {
                const res = await fetch("/translate", {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify({ text, targetLang: "en" }),
                });
                const result = await res.json();
                output.innerText = result.translated || "Translation failed.";
              } catch (err) {
                output.innerText = "Error translating comment.";
              }
            }
          });

          // Bubble for comment form submission
          parent.addEventListener("submit", async (e) => {
            if (e.target.closest("#comment-form")) {
              e.preventDefault();
              const form = e.target;
              const section = form.closest(".comment-section");
              const postType = section.closest(".secret").dataset.type;
              const postId = section.querySelector("#secretId")?.value || section.querySelector("#audioId")?.value;

              const secretUserId = form.querySelector('[name="secretUserId"]').value;
              const commentUserId = form.querySelector('[name="commentUserId"]').value;
              const commentInput = form.querySelector("#commentInput").value;

              const display = section.querySelector(".comment-display");
              const count = section.querySelector(".comment-count");
              const notice = document.getElementById("notification")

              try {
                const res = await fetch(`/comment/${postType}`, {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify({
                    id: postId,
                    secretUserId,
                    commentUserId,
                    comment: commentInput
                  }),
                });

                const result = await res.json();

                if (result.success) {
                  const commentsRes = await fetch(`/comment/${postType}/${postId}`);
                  const data = await commentsRes.json();
                  const comments = data.comments || [];

                  display.innerHTML = `<p class="total">All comments: ${data.totalComments}</p>`;
                  display.innerHTML += comments.map(comment => `
          <li class="comment-item">
            <div>
              <small class="user"><strong>@anonym${comment.user_id}</strong></small>
              <p class="comment">${comment.comment}</p>
            </div>
            <button type="button" class="translate-btn" data-id="${comment.id}" data-text="${comment.comment}">Translate to english</button>
            <p class="translated-text" id="translated-${postId}-${comment.id}"></p>
          </li>
        `).join("");

                  count.textContent = data.totalComments;
                  form.querySelector("#commentInput").value = "";
                } else {
                  if (notice) {
                    notice.innerHTML = `<div class="toast">Failed to post comment</div>`;
                    setTimeout(() => (notice.innerHTML = ""), 3000);
                  }
                }
              } catch (err) {
                console.error(err);
                if (notice) {
                  notice.innerHTML = `<div class="toast">Error posting comment</div>`;
                  setTimeout(() => (notice.innerHTML = ""), 3000);
                }
              }
            }
          });
        });
      </script>


  <script>
        const fetchTopDiscussedSecret = async () => {
try {
  const response = await fetch('/top-discussed');
  const data = await response.json();
  const topSecret = data.topSecret

  if (data.success) {
      showAnnouncement(topSecret);
      // console.log(secret.secret)
  } else {
      console.log('No trending secret to display.');
  }
} catch (error) {
  console.error('Error fetching top discussed secret:', error);
}
};

const pinSecret = (topSecret) => {
    const pinnedSection = document.getElementById('pinned-secret');
    pinnedSection.innerHTML = `
        <button  formaction="/secret/${topSecret.id}" class="nav-btn pin-card">
            <p>${topSecret.secret.substring(0, 100 ) + "..."}</p>
            <small>~~@anonym${topSecret.user_id}~~</small>
            <i class="fas fa-thumbtack pinned"></i>
        </button>
    `;

    // Set a timeout to unpin the secret after 24 hours
    setTimeout(() => {
        pinnedSection.innerHTML = '';
    }, 24 * 60 * 60 * 1000); // 24 hours
};


// Schedule the announcement at 12:00 PM GMT
const now = new Date();
const targetTime = new Date();
targetTime.setUTCHours(12, 0, 0, 0); // 12:00 PM GMT
const timeUntilAnnouncement = targetTime - now;

setTimeout(fetchTopDiscussedSecret, timeUntilAnnouncement);
  </script>

<script src="https://unpkg.com/lottie-web@5.10.0/build/player/lottie.min.js"></script>
        <!-- Load Day.js and the plugin via CDN -->
        <script src="https://cdn.jsdelivr.net/npm/dayjs@1/dayjs.min.js"></script>
        <script>
          dayjs.extend(window.dayjs_plugin_relativeTime);

          document.querySelectorAll('.timestamp').forEach((timeElem) => {
            const rawTimestamp = timeElem.getAttribute('data-raw');
            if (rawTimestamp) {
              const formatted = dayjs(rawTimestamp).fromNow();
              timeElem.textContent = formatted;
            }
          });
        </script>


  <script src="/js/app.js"></script>