
<style>
  
  #pinned-secret {
      width: 100% !important;
    }

    .pin-card .card {
      padding: .5rem !important;
    }

  .pin-card::after {
      display: none;
    }

  #gift-container {
      position: relative;
      display: flex;
      justify-content: center;
      align-items: center;
      width: 200px;
      height: 200px;
  }

  /* Neon Rays Effect */
  #neon-rays {
      position: absolute;
      width: 250px;
      height: 250px;
      background: radial-gradient(circle, rgba(255, 0, 255, 0.6) 10%, rgba(0, 255, 255, 0.3) 60%, transparent 100%);
      border-radius: 50%;
      filter: blur(25px);
      opacity: 0;
      transition: opacity 0.5s ease-in-out, transform 0.5s ease-in-out;
  }

  /* Gift Box Image */
  #gift-img {
      width: 150px;
      cursor: pointer;
  }

  /* Animation when gift is opened */
  .open-box {
      transform: scale(1.1);
      animation: shake 0.6s ease-in-out;
  }

  /* Keyframe for shaking effect */
  @keyframes shake {
      0% { transform: translateY(0); }
      25% { transform: translateY(-5px); }
      50% { transform: translateY(5px); }
      75% { transform: translateY(-3px); }
      100% { transform: translateY(0); }
  }

  /* Keyframe for Neon Glow */
  @keyframes neonGlow {
      0% { opacity: 0; transform: scale(0.8); }
      50% { opacity: 1; transform: scale(1.2); }
      100% { opacity: 0; transform: scale(1.5); }
  }

  .glow-effect {
      animation: neonGlow 1.2s ease-out;
  }


/* Apply your shake & jump animation class */
.animated-box {
    animation: your-animation 1s ease-in-out;
}

/* Secret Card Styles */
#secret-card {
    display: none;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(0.6);
    width: 320px;
    padding: 20px;
    background: white;
    border-radius: 10px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    opacity: 0;
    transition: opacity 0.5s ease-in-out, transform 0.5s ease-in-out;
    z-index: 100;
}

/* Active State (pops up) */
.show-secret {
    display: block;
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
}

/* Overlay Background */
#overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
    z-index: 90;
}

/* Close Button */
#close-secret {
    position: absolute;
    top: 10px;
    right: 10px;
    background: transparent;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: #555;
}

.shimmer-wrapper {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      /* padding: 1rem; */
    }

    .shimmer-card {
      display: flex;
      background: var(--container-bg);
      border-radius: 10px;
      overflow: hidden;
      animation: pulse 1.5s infinite;
    }

    .shimmer-avatar {
      width: 50px;
      height: 50px;
      background: var(--body-bg);
      border-radius: 50%;
      margin: 1rem;
    }



    .shimmer-lines {
      flex: 1;
      padding: 1rem 0;
    }

    .shimmer-line {
      height: 10px;
      background: var(--body-bg);
      margin: 8px 0;
      border-radius: 5px;
    }

    .shimmer-line.short {
      width: 50%;
    }

    .shimmer-footer {
      display: flex;
      gap: 1rem;
      margin-top: 1rem;
    }

    .shimmer-btn {
      width: 40px;
      height: 20px;
      background: var(--body-bg);
      border-radius: 5px;
    }

    @keyframes pulse {
      0% {
        background-color: var(--container-bg);
      }

      50% {
        background-color: var(--body-bg);
      }

      100% {
        background-color: var(--container-bg);
      }
    }

    .shimmer {
      background: linear-gradient(90deg, var(--container-bg) 25%, var(--body-bg) 50%, var(--container-bg) 75%);
      background-size: 200% 100%;
      animation: shimmer 1.5s infinite;
    }

    @keyframes shimmer {
      0% {
        background-position: -200% 0;
      }

      100% {
        background-position: 200% 0;
      }
    }

    .secret .card {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      padding: 1.5rem !important;
      background: var(--container-bg);
      border-radius: 1.5rem;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      position: relative;
    }

    .card-header {
      display: flex;
      align-items: center;
      gap: 1rem;
    }


    .profile-pic {
      width: 100%;
      height: 100%;
      object-fit: contain;
      display: block;
      z-index: 0;
    }


.card-content p {
      font-family: "Gloria Hallelujah", cursive;
      font-size: 1.1rem;
      line-height: 1.6;
      margin: 0 !important;
    }

    .reactions.sleek {
      display: flex;
      justify-content: space-between;
    }

    .reaction-btn {
      display: inline-flex;
      align-items: center;
      gap: 6px;
      background: var(--body-bg);
      border: none;
      border-radius: 30px;
      padding: 0.4rem 0.9rem;
      font-size: 0.9rem;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .reaction-btn:hover {
      background: var(--container-bg);
      transform: scale(1.05);
    }

    .reaction-count {
      font-weight: bold;
      color: var(--text-color);
    }
</style>

  
  <form id="pinned-secret" method="GET"  style="margin-bottom: 20px !important; text-align: center; width: 100%;" ></form>
      <div id="main">

        


        <section>
          

  <script>
    socket.on('new-secret', (data) => {
        // Display a modern toast notification
        const notification = document.createElement('div');
        notification.innerText = `New secret shared: ${data.secret}`;
        notification.style.position = 'fixed';
        notification.style.bottom = '10px';
        notification.style.right = '10px';
        notification.style.backgroundColor = '#4caf50';
        notification.style.color = '#fff';
        notification.style.padding = '10px';
        notification.style.borderRadius = '5px';
        document.body.appendChild(notification);

        // Remove notification after 5 seconds
        setTimeout(() => notification.remove(), 5000);
    });
</script>

  <div class="jumbotron text-center">
    <div class=" container">
      <!-- <i class="fas fa-key fa-6x"></i> -->
      <form id="pinned-secret" method="GET"  style="margin-bottom: 20px !important; text-align: center; width: 100%;" ></form>
      

      <center>
        <h1 class="display-3">You've Pocknosed a Gist Amebo!</h1>
        <p>Don't kiss and tell</p>
      </center>

      

      <% if (locals.secret) { %>
        <ul id="secrets">
          <!-- <h2>Secret</h2> -->
           <!-- <br> -->
          <li class="secret">
            <div class="card">
            
              <% if (secret.category=="funny" ) { %>
                <span class="tag funny"><i class="fas fa-laugh"></i></span>
                <% } else if (secret.category=="love" ) { %>
                  <span class="tag love"><i class="fas fa-heart"></i></span>
                  <% } else if (secret.category=="nasty" ) { %>
                    <span class="tag nasty"><i class="fas fa-skull-crossbones"></i></span>
                    <% } else if (secret.category=="sassy" ) { %>
                      <span class="tag sassy"><i class="fas fa-face-meh"></i></span>
                      <% } else if (secret.category=="hilarious" ) { %>
                        <span class="tag hilarious"><i class="fas fa-teeth-open"></i></span>
                        <% } else if (secret.category=="random" ) { %>
                          <span class="tag random"><i class="fas fa-shuffle"></i></span>
                          <% } else { %>
                            <span class="tag random"><i class="fas fa-shuffle"></i></span>
                            <% } %>



              <div class="card-header">
                <div class="avatar-profile"><img src="../.<%= secret.profile_picture%>"
                    alt="Profile Picture" class="profile-pic"></div>
                <div class="user-info">
                  <p class="username"> @amebo<%= secret.user_id %>~~</p>
                  <span class="timestamp" data-raw="<%= secret.timestamp %>"></span>
                </div>

              </div>

              <div class="card-content">
                <p>
                  <span class="content">
                        <%= secret.secret %>
                  </span>

<button
class=" read" style="
background: none;
font-size: 1rem;
padding: 0;
font-weight: bold;
padding: .75rem !important;
font-weight: bold;
font-family: 'Courier New', Courier, monospace !important;
" data-full="<%= secret.secret %>" data-truncated="<%= secret.secret.substring(0, 250) + '...' %>">
                    See Less
                    </button>

                </p>
              </div>

              <div class="reactions sleek">
                <div class="secret-card" data-id="<%= secret.id %>">
                  <div class="reactions">

                    <button class="reaction-btn" data-type="like">
                      <!-- <div id="like-animation" class="lottie-animation"></div> -->
                      <!-- <i class="fas fa-heart"></i> -->
                      ❤️
                      <span class="reaction-count">
                        <%= secret.reactions.like ? secret.reactions.like.count : 0 %>
                      </span>
                    </button>
                  </div>

                  <div class="floating-lottie" data-type="like"></div>


                </div>


                <div class="comment-section" data-secret-id="<%= secret.id %>">
                  <button id="commentButton" class="reaction-btn"><i
                      class="fas fa-comment"></i><span class="comment-counts"></span></button>
                  <div class="comment-dropdown" id="commentDropdown">
                    <form class="comment-display" method="POST" id="commentDisplay">
                      <% if (locals.comments) { %>

                      <ul id="comments" class="comments-list">
                        <p class="total">All comments: <%= totalComments %>
                        </p>
                        <% comments.reverse().forEach((comment)=> { %>
                          <li class="comment-item">
                            <div>
                              <small class="user"><strong>@anonym<%= comment.user_id %></strong></small>
                              <p class="comment">
                                <%= comment.comment %>
                              </p>
                            </div>
                            <!-- <button formaction="/reply">reply</button> -->
                          </li>
                          <% }) %>
                      </ul>
                      <% } else if(locals.noComment) {%>
                        <p>
                          <%= noComment %>
                        </p>
                        <% } %>
                      </form>
                    <form action="/comment" method="POST" id="comment-form">
                      <input type="hidden" name="id" id="secretId"
                        value="<%= secret.id %>" />
                      <input type="hidden" name="secretUserId"
                        value="<%= secret.user_id %>" />
                      <input type="hidden" name="commentUserId" value="<%= userId %>" />
                      <textarea id="commentInput" placeholder="Write a comment..."
                        name="comment"></textarea>
                      <!-- <input type="text" id="commentInput" placeholder="Write a comment" name="comment"> -->
                      <button id="postCommentButton">
                        Post
                      </button>
                      <% if (locals.message) { %>
                        <small>
                          <%= message %>
                        </small>
                        <% } %>
                    </form>



                  </div>
                </div>


              </div>

              <ul class="card-menu">
                <li>
                  <button class="menu-toggle-btn"><i
                      class="fas fa-ellipsis-vertical"></i></button>
                  <ul class="card-menu-content" style="display: none;">
                    <li>
                      <button class="report-btn" data-id="<%= secret.id %>">
                        <i class="fa-regular fa-flag"></i>Report
                      </button>
                    </li>
                    <li>
                      <button class="copy-btn">
                        <i class="fas fa-copy">Copy</i>
                      </button>
                    </li>
                  </ul>
                </li>
              </ul>



            </div>
          </li>
        </ul>
        <% } %>
        <br>

        <a href="/submit"  style="margin-left: .5rem !important;" class="nav-link btn btn-dark secret-btn" role="button">Share a Gist</a>

   <script>
      document.querySelectorAll('.nav-link').forEach(link => {
        link.addEventListener('click', function(e) {
          e.preventDefault();
          showBrandLogo();
    
          setTimeout(() => {
            window.location.href = this.href;
          }, 2400); // give animation time to play
        });
      });
    </script>
    
        <hr style="margin-top: 2rem; opacity: 0 !important;">
 

    </div>
  </div>
  
</section>


<aside class="right-sidebar">
  <div class="aside premium-aside">
      <div class="premium-card">
        <div class="crown-icon sparkle">👑</div>
    
        <h3 class="premium-title">Become a Chief Gossipa</h3>
        <p class="premium-text">Stand out in the World of anonymity. Get Heard. Remain unknown.</p>
    
        <div class="trending-stats">
          <span>🔥 Trending Now: <strong>152</strong> Gissipas</span>
        </div>
    
        <div class="avatar-hint">
          <img src="/img/avatars/thumbs/dog.jpg" alt="Anonymous" class="blur-avatar" />
          <p>You’re 1 step from <strong>trending</strong>…</p>
        </div>
    
        <a href="/subscribe" class="premium-btn">Unlock Premium</a>
      </div>
    </div>
      
    <div class="aside aside-2">
      <center>
        <h4 class="user-count"><button class="dot active animate-ping-once" data-slide="0"></button>&nbsp;Active Gossipas: <span id="activeCount">0</span></h4>
      </center>
      <ul class="nav user-list">
      </ul>

    </div>

</aside>

</div>



<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
  const connectedUsersMap = new Map();
  const userList = document.querySelector(".user-list");
  const userCountDisplay = document.getElementById("activeCount");

  function updateUserCount() {
    userCountDisplay.textContent = connectedUsersMap.size;
  }

  function userConnected(user) {
    if (connectedUsersMap.has(user.id)) return;

    const userBox = document.createElement("li");
    userBox.className = "connected-user nav-item enter";
    userBox.id = `user-${user.id}`;
    const verifiedBadge = `${user.verified}`
    ? `<img src="/img/badge.png" alt="Verified Badge" class="verified-badge" style="width: 16px; height: 16px;">`
    : "";

        userBox.innerHTML = `
          <div class="user-card" style="display: flex; align-items: center; gap: 10px;">
            <img src="${user.profile_picture}" alt="Avatar" class="profile-pic" style="width: 32px; height: 32px; border-radius: 50%;">
            <p>
              @amebo${user.id}
             ${verifiedBadge}
              </p>
          </div>
        `;
    userList.appendChild(userBox);
    connectedUsersMap.set(user.id, userBox);
    updateUserCount();

    // Trigger reflow for entry animation
    requestAnimationFrame(() => {
      userBox.classList.add("enter");
    });
  }

  function userDisconnected(userId) {
    const userBox = connectedUsersMap.get(userId);
    if (userBox) {
      userBox.classList.add("exit");
      userBox.classList.remove("enter");
      setTimeout(() => {
        userBox.remove();
        connectedUsersMap.delete(userId);
        updateUserCount();
      }, 400); // CSS transition match
    }
  }

  socket.on("userJoined", async (userId) => {
    try {
      const res = await fetch(`/user/${userId}`);
      const user = await res.json();
      userConnected(user);
    } catch (err) {
      console.error("Failed to fetch user data:", err);
    }
  });

  socket.on("userLeft", (userId) => {
    userDisconnected(userId);
  });

  // Load current active users on first load
  fetch("/active-users")
    .then(res => res.json())
    .then(users => {
      users.forEach(user => userConnected(user));
    })
    .catch(console.error);
</script>

  <script>
      const header = document.querySelector('header');
      const nextSection = document.querySelector('body').querySelector('section:not(.active)');
      const logo = document.getElementById('logo')

      window.addEventListener('scroll', function () {
          const scrolled = window.scrollY > 0;
          if (scrolled) {
              let body = document.querySelector('body');
              body.style.overflowY = 'scroll';
              header.classList.add('scrolled');
          } else {
              header.classList.remove('scrolled');
          }
      });

      window.onload = function () {
          const textArea = document.querySelector('textarea')
          textArea.blur();
      }


      function changeBg(event) {
          event.target.style.background = "var(--secondary-color)"
          event.target.style.border = "1px solid var(--primary-color)"
      }

  </script>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
        fetch("/api/comment-counts")
            .then(res => res.json())
            .then(counts => {
                Object.entries(counts).forEach(([secretId, count]) => {
                    const el = document.querySelector(`[data-secret-id="${secretId}"] .comment-count`);
                    if (count) {
                        // el.textContent = `${count} comment${count !== 1 ? 's' : ''}`;
                        el.textContent = `${count}`;
                    } 
                });
            })
            .catch(err => console.error("Failed to fetch comment counts", err));
    });
    </script>
 <script>
  $(document).ready(function () {
    $(".comment-section").each(function () {
      const commentSection = $(this);

      // Submit comment form
      commentSection.find("#comment-form").on("submit", function (e) {
        e.preventDefault();

        const secretId = commentSection.find("#secretId").val();
        const secretUserId = commentSection.find('[name="secretUserId"]').val();
        const commentUserId = commentSection.find('[name="commentUserId"]').val();
        const comment = commentSection.find("#commentInput").val();
        const commentDisplay = commentSection.find("#commentDisplay");

        $.ajax({
          url: "/comment",
          type: "POST",
          data: {
            id: secretId,
            secretUserId,
            commentUserId,
            comment,
          },
          success: async function (response) {
            if (response.success) {
              try {
                const fetchResponse = await fetch(`/more/${secretId}`);
                if (!fetchResponse.ok) throw new Error("Failed to fetch comments");

                const data = await fetchResponse.json();
                const comments = data.comments;

                if (comments) {
                  let commentDisp = comments.map((comment) => `
                <li class="comment-item">
                  <div>
                    <small class="user"><strong>@anonym${comment.user_id}</strong></small>
                    <p class="comment">${comment.comment}</p>
                    <button class="translate-btn" data-id="${comment.id}" data-text="${comment.comment}">Translate</button>
                    <p class="translated-text" id="translated-${comment.id}"></p>
                  </div>
                </li>
              `).join("");

                  commentDisplay.html(`
                <ul id="comments">
                  <p class="total">All comments: ${data.totalComments}</p>
                  ${commentDisp}
                </ul>
              `);
                } else {
                  commentDisplay.html(`
                <ul id="comments">
                  <p class="total">${data.noComment}</p>
                </ul>
              `);
                }
              } catch (err) {
                console.log(err);
              }

              commentSection.find("#commentInput").val(""); // clear input
            } else {
              console.log("Failed to post comment:", response.message);
            }
          },
          error: function (err) {
            console.log("Error submitting comment:", err);
          },
        });
      });

      // Translation handler (delegated for dynamic buttons)
      commentSection.on("click", ".translate-btn", function (e) {
        e.preventDefault();
        const btn = $(this);
        const commentText = btn.data("text");
        const commentId = btn.data("id");
        const translatedBox = commentSection.find(`#translated-${commentId}`);

        $.ajax({
          url: "/translate",
          type: "POST",
          contentType: "application/json",
          data: JSON.stringify({ text: commentText, targetLang: "en" }),
          success: function (res) {
            if (res.translated) {
              translatedBox.text(res.translated);
            } else {
              translatedBox.text("Translation failed.");
            }
          },
          error: function (err) {
            translatedBox.text("Error translating comment.");
          },
        });
      });
    });
  });
</script>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const commentSections = document.querySelectorAll(".comment-section");

    commentSections.forEach(async (section) => {
      const secretId = section.querySelector("#secretId").value;
      const commentList = section.querySelector(".comments-list");

      // Toggle dropdown
      section.querySelector("#commentButton").addEventListener("click", () => {
        const dropdown = section.querySelector(".comment-dropdown");
        dropdown.classList.toggle("active");

        const icon = section.querySelector("#commentButton i");
        icon.className = dropdown.classList.contains("active")
          ? "fas fa-comment-slash"
          : "fas fa-comment";
      });

      // Fetch and display comments
      try {
        const response = await fetch(`/more/${secretId}`);
        const data = await response.json();
        const comments = data.comments;

        if (comments && comments.length > 0) {
          section.querySelector(".comment-display").insertAdjacentHTML(
            "afterbegin",
            `<p class="total">All comments: ${data.totalComments}</p>`
          );

          comments.forEach((comment) => {
            const li = document.createElement("li");
            li.className = "comment-item";
            li.innerHTML = `
      <div>
        <small class="user"><strong>@anonym${comment.user_id}</strong></small>
        <p class="comment">${comment.comment}</p>
      </div>
      <button type="button" class="translate-btn" data-id="${comment.id}" data-text="${comment.comment}">Translate</button>
      <p class="translated-text" id="translated-${secretId}-${comment.id}"></p>
    `;
            commentList.appendChild(li);
          });
        } else {
          commentList.innerHTML = `<p class="total">${data.noComment}</p>`;
        }
      } catch (err) {
        console.error("Error loading comments:", err);
      }

      // Delegate click for Translate buttons inside this section
      commentList.addEventListener("click", async (e) => {
        if (e.target.classList.contains("translate-btn")) {
          const btn = e.target;
          const text = btn.dataset.text;
          const id = btn.dataset.id;
          const output = section.querySelector(`#translated-${secretId}-${id}`);

          output.innerText = "Translating...";

          try {
            const res = await fetch("/translate", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ text, targetLang: "en" }),
            });

            const result = await res.json();
            if (result.translated) {
              output.innerText = result.translated;
            } else {
              output.innerText = "Translation failed.";
            }
          } catch (err) {
            output.innerText = "Error translating comment.";
            console.error(err);
          }
        }
      });
    });
  });
</script>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll(".reaction-btn").forEach((button) => {
      const animations = {
        like: './img/lottie/love4.json',
        laugh: './img/lottie/laugh.json',
        cry: './img/lottie/cry.json',
        gasp: './img/lottie/gasp.json'
      };


      button.addEventListener("click", async (event) => {
        const btn = event.target.closest(".reaction-btn");
        const type = btn.getAttribute("data-type");
        const secretCard = btn.closest(".secret-card");
        const secretId = secretCard.getAttribute("data-id");


        const emojiChar = btn.textContent.trim().split('\n')[0];
        const card = btn.closest('.secret');
        const floatingContainer = card.querySelector('.floating-lottie');
        const floating = document.createElement('div');
        floating.className = 'floating-lottie-animated';
        card.appendChild(floating);


        // === 1. EMOJI BURST AROUND BUTTON ===
        triggerEmojiBurst(btn, emojiChar);

        // === 2. 3D EXTRAS AROUND BUTTON ===
        if (type === 'cry') {
          const tear = document.createElement('span');
          tear.className = 'emoji-particle';
          tear.innerText = '💧';
          tear.style.setProperty('--x', '0px');
          tear.style.setProperty('--y', '50px');
          button.appendChild(tear);
          setTimeout(() => tear.remove(), 800);
        }

        if (type === 'gasp') {
          const puff = document.createElement('span');
          puff.className = 'emoji-particle';
          puff.innerText = '💨';
          puff.style.setProperty('--x', '-10px');
          puff.style.setProperty('--y', '0px');
          button.appendChild(puff);
          setTimeout(() => puff.remove(), 800);
        }


        try {
          const response = await fetch(`/secret/${secretId}/react`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ type }),
          });

          const data = await response.json();


          const animation = lottie.loadAnimation({
            container: floating,
            renderer: 'svg',
            loop: false,
            autoplay: true,
            path: animations[type]
          });

          // Get button to card offset
          const buttonRect = button.getBoundingClientRect();
          const cardRect = card.getBoundingClientRect();

          const startX = buttonRect.left - cardRect.left + buttonRect.width / 2;
          const startY = buttonRect.top - cardRect.top + buttonRect.height / 2;

          floating.style.left = `${startX}px`;
          floating.style.top = `${startY}px`;

          // 🎇 TRAIL PARTICLES WHILE MOVING
          const trailEmojis = ['✨', '💥', '💨'];
          let trailInterval = setInterval(() => {
            const trail = document.createElement('span');
            trail.className = 'trail-particle';
            trail.innerText = trailEmojis[Math.floor(Math.random() * trailEmojis.length)];

            // Offset from Lottie position
            const offsetX = (Math.random() - 0.5) * 60;
            const offsetY = (Math.random() - 0.5) * 60;

            trail.style.left = `${floating.offsetLeft}px`;
            trail.style.top = `${floating.offsetTop}px`;
            trail.style.setProperty('--trail-x', `${offsetX}px`);
            trail.style.setProperty('--trail-y', `${offsetY}px`);

            card.appendChild(trail);
            setTimeout(() => trail.remove(), 600);
          }, 100);

          // 🎯 Animate to center
          setTimeout(() => {
            floating.classList.add('to-center');
          }, 50);

          // 👋 Animate back and remove
          setTimeout(() => {
            floating.classList.remove('to-center');
            floating.classList.add('to-button');
            clearInterval(trailInterval);
          }, 1200);

          setTimeout(() => {
            floating.remove();
          }, 1800);


          if (data.success) {
            const countSpan = btn.querySelector(".reaction-count");
            countSpan.textContent = data.reactions[type].count || 0; // Use updated count from server
          } else {
            console.error("Failed to update reactions:", data.error);
          }
        } catch (error) {
          console.error("Error updating reactions:", error);
        }


        function triggerEmojiBurst(container, emojiChar) {
          const burstCount = 10;

          for (let i = 0; i < burstCount; i++) {
            const particle = document.createElement('span');
            particle.classList.add('emoji-particle');
            particle.innerText = emojiChar;

            const angle = Math.random() * 2 * Math.PI;
            const distance = Math.random() * 40 + 20;
            const x = Math.cos(angle) * distance + 'px';
            const y = Math.sin(angle) * distance + 'px';

            particle.style.setProperty('--x', x);
            particle.style.setProperty('--y', y);

            container.appendChild(particle);
            setTimeout(() => particle.remove(), 800);
          }

          container.classList.add('pop-animate');
          setTimeout(() => container.classList.remove('pop-animate'), 300);
        }
      });
    });
  });


  document.querySelectorAll(".read").forEach((button) => {
    button.addEventListener("click", (e) => {
      const contentSpan = e.target.previousElementSibling;
      const isTruncated = e.target.textContent === "Read More";

      if (isTruncated) {
        // Show full content
        contentSpan.textContent = e.target.dataset.full;
        e.target.textContent = "See Less";
      } else {
        // Reapply truncated content
        contentSpan.textContent = e.target.dataset.truncated;
        e.target.textContent = "Read More";
      }
    });
  });

  document.querySelectorAll(".menu-toggle-btn").forEach((button) => {
    button.addEventListener("click", (e) => {
      const menuContent = e.target.closest(".card-menu").querySelector(".card-menu-content");
      const isVisible = menuContent.style.display === "block";

      // Hide all other menus
      document.querySelectorAll(".card-menu-content").forEach((menu) => {
        menu.style.display = "none";
      });

      // Toggle current menu
      menuContent.style.display = isVisible ? "none" : "block";

      // Stop event propagation to prevent immediate hiding
      e.stopPropagation();
    });
  });

  // Hide menu when clicking elsewhere
  document.addEventListener("click", () => {
    document.querySelectorAll(".card-menu-content").forEach((menu) => {
      menu.style.display = "none";
    });
  });


  document.addEventListener("click", function (event) {
    if (event.target.closest(".fas.fa-copy")) {
      const button = event.target.closest(".fas.fa-copy");

      // Find the closest card container to get the content
      const cardContainer = button.closest(".card");

      // Extract the content inside the card container
      const contentToCopy = cardContainer.querySelector(".content")?.innerText;

      if (contentToCopy) {
        if (navigator.clipboard && navigator.clipboard.writeText) {
          // Use Clipboard API if available
          navigator.clipboard
            .writeText(contentToCopy)
            .then(() => {
              alert("Content copied to clipboard!");
            })
            .catch((err) => {
              console.error("Failed to copy: ", err);
              alert("Failed to copy content.");
            });
        } else {
          // Fallback for unsupported browsers
          const tempInput = document.createElement("textarea");
          tempInput.value = contentToCopy;
          document.body.appendChild(tempInput);
          tempInput.select();
          try {
            document.execCommand("copy");
            alert("Content copied to clipboard!");
            button.innerHTML = "Copied!"
          } catch (err) {
            console.error("Fallback copy failed: ", err);
            alert("Copy failed. Please copy manually.");
          }
          document.body.removeChild(tempInput);
        }
      } else {
        console.error("No content to copy.");
        alert("Nothing to copy.");
      }
    }
  });

</script>

  <script>
        const fetchTopDiscussedSecret = async () => {
try {
  const response = await fetch('/top-discussed');
  const data = await response.json();
  const topSecret = data.topSecret

  if (data.success) {
      showAnnouncement(topSecret);
      // console.log(secret.secret)
  } else {
      console.log('No trending secret to display.');
  }
} catch (error) {
  console.error('Error fetching top discussed secret:', error);
}
};

const pinSecret = (topSecret) => {
    const pinnedSection = document.getElementById('pinned-secret');
    pinnedSection.innerHTML = `
        <button  formaction="/secret/${topSecret.id}" class="nav-btn pin-card">
            <p>${topSecret.secret.substring(0, 100 ) + "..."}</p>
            <small>~~@anonym${topSecret.user_id}~~</small>
            <i class="fas fa-thumbtack pinned"></i>
        </button>
    `;

    // Set a timeout to unpin the secret after 24 hours
    setTimeout(() => {
        pinnedSection.innerHTML = '';
    }, 24 * 60 * 60 * 1000); // 24 hours
};


// Schedule the announcement at 12:00 PM GMT
const now = new Date();
const targetTime = new Date();
targetTime.setUTCHours(12, 0, 0, 0); // 12:00 PM GMT
const timeUntilAnnouncement = targetTime - now;

setTimeout(fetchTopDiscussedSecret, timeUntilAnnouncement);
  </script>

<script src="https://unpkg.com/lottie-web@5.10.0/build/player/lottie.min.js"></script>
        <!-- Load Day.js and the plugin via CDN -->
        <script src="https://cdn.jsdelivr.net/npm/dayjs@1/dayjs.min.js"></script>
        <script>
          dayjs.extend(window.dayjs_plugin_relativeTime);

          document.querySelectorAll('.timestamp').forEach((timeElem) => {
            const rawTimestamp = timeElem.getAttribute('data-raw');
            if (rawTimestamp) {
              const formatted = dayjs(rawTimestamp).fromNow();
              timeElem.textContent = formatted;
            }
          });
        </script>


    <script src="/js/defaultTheme.js"></script>
  <script src="/js/app.js"></script>