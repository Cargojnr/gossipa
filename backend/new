          <p>
                ${secret.secret}
                <a id="pinnedButton" class="read"
                href="#secret${secret.id}"
                  style="
                    background: none;
                    font-size: 1rem;
                    padding: 0;
                    font-weight: bold;
                  "
                  >View secret</a
                >
              </p>


              <div class="secret-card" data-id="<%= secret.id %>">
                <div class="reactions">
                    <button class="reaction-btn" data-type="like">
                        👍
                        <span class="reaction-count">
                            <%= secret.reactions.like ? secret.reactions.like.count : 0 %>
                        </span>
                    </button>
                    <button class="reaction-btn" data-type="laugh">
                        😂
                        <span class="reaction-count">
                            <%= secret.reactions.laugh ? secret.reactions.laugh.count : 0 %>
                        </span>
                    </button>
                    <button class="reaction-btn" data-type="cry">
                        😢
                        <span class="reaction-count">
                            <%= secret.reactions.cry ? secret.reactions.cry.count : 0 %>
                        </span>
                    </button>
                    <button class="reaction-btn" data-type="gasp">
                        😱
                        <span class="reaction-count">
                            <%= secret.reactions.gasp ? secret.reactions.gasp.count : 0 %>
                        </span>
                    </button>
                </div>
                <button><i class="fas fa-copy"></i></button>
            </div>

            <p class="footer-text">
                <a href="">GistTown</a> lets you share secrets anonymously online,
                End-to-End encrypted. One time. Keep anonymous secrets out of email,
                Whatsapp, Telegram or any other communication channel. Here you are
                100% hidden to users as your privacy is our priority.
              </p>
            
              if (type === "audio") {
            } else {
                return res.status(400).json({ message: "Invalid type" });
              }

              socket.on("receive-reaction", () => {
                reactionTotal++;
                reactionCount.classList.remove("hidden");
                reactionCount.textContent = `❤️ ${reactionTotal}`;
              
                const float = document.createElement("div");
                float.className = "floating-reaction";
                float.textContent = "❤️";
                float.style.left = `${Math.random() * 100}%`;
                document.getElementById("floatingReactions").appendChild(float);
                setTimeout(() => float.remove(), 1500);
              });



              socket.on("update-listener-count", (count) => {
                listeners = count;
                listenerCount.textContent = `👂 ${listeners} listening`;
              });
              
              socket.on("listener-joined", ({ streamUserId, avatarUrl }) => {
                if (!isStreaming || streamUserId !== currentUserId) return;
                const icon = document.createElement("img");
                icon.src = `../.${avatarUrl}`;
                icon.className = "listener-avatar pop-in";
                const avatarBox = document.getElementById("listenerAvatars");
              if (avatarBox) avatarBox.appendChild(icon);
              
                setTimeout(() => {
                  icon.classList.add("fade-out");
                  setTimeout(() => icon.remove(), 1000);
                }, 5000);
              });

              
              
        <form id="selectCategory" class="menu-category" method="POST">
          <button class="category-item" data-category="love">All</button>
          <button class="category-item" data-category="love">❤️ Love</button>
          <button class="category-item" data-category="funny">😂 Funny</button>
          <button class="category-item" data-category="nasty">😈 Nasty</button>
          <button class="category-item" data-category="sassy">💅 Sassy</button>
          <button class="category-item" data-category="hilarious">🤣 Hilarious</button>
          <button class="category-item" data-category="random">🎲 Random</button>

        </form>
         
              
        <script>
          const catMenu = document.getElementById("selectCategory");

          catMenu.addEventListener("wheel", (e) => {
            if (e.deltaY === 0) return;
            e.preventDefault();
            catMenu.scrollLeft += e.deltaY;
          }, { passive: false });

          // Optional: Auto-scroll to active category
          const activeCat = catMenu.querySelector(".category-item.active");
          if (activeCat) {
            activeCat.scrollIntoView({ behavior: "smooth", inline: "center" });
          }

          document.querySelectorAll(".category-item").forEach((btn) => {
            btn.addEventListener("click", (e) => {
              e.preventDefault()
              // Haptic feedback if supported
              if (navigator.vibrate) {
                navigator.vibrate(10); // light tap feedback
              }

              // Optional: update active class manually
              document.querySelectorAll(".category-item").forEach(b => b.classList.remove("active"));
              btn.classList.add("active");

              // Scroll into center
              btn.scrollIntoView({ behavior: "smooth", inline: "center" });
            });
          });


        </script>

        
    #selectCategory {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: .5rem;
    }



<script>
  // Gossipa - Category-Based Secret Fetcher with Shimmer UI and Haptic Feedback
  
  // Utility: Detect Mobile Device
  const isMobile = /Mobi|Android/i.test(navigator.userAgent);
  
  document.addEventListener("DOMContentLoaded", () => {
    const menu = document.querySelector(".menu-category");
    const secretsContainer = document.getElementById("secrets-container");
    const shimmerTemplate = document.getElementById("shimmerTemplate");
    const feeds = document.querySelector("#feeds #secrets");
    const categoryItems = document.querySelectorAll(".category-item");
  
    categoryItems.forEach((item) => {
      item.addEventListener("click", async (e) => {
        const selectedCategory = e.target.closest(".category-item").dataset.category.toLowerCase();
  
        // Haptic feedback (only on mobile)
        if (isMobile && navigator.vibrate) navigator.vibrate(10);
  
        // Visually mark selected category
        categoryItems.forEach((btn) => btn.classList.remove("active"));
        item.classList.add("active");
        item.scrollIntoView({ behavior: "smooth", inline: "center" });
  
        try {
          // Begin shimmer animation
          secretsContainer.innerHTML = "";
          for (let i = 0; i < 3; i++) {
            const shimmer = shimmerTemplate.content.cloneNode(true);
            secretsContainer.appendChild(shimmer);
          }
          secretsContainer.classList.remove("fade-out");
          secretsContainer.classList.add("fade-in");
  
          // Fetch secrets from server
          const response = await fetch(`/feeds/${selectedCategory}`);
          if (!response.ok) throw new Error("Failed to fetch secrets");
  
          const secrets = await response.json();
          secretsContainer.innerHTML = "";
  
          if (Array.isArray(secrets.secrets) && secrets.secrets.length > 0) {
            feeds.style.display = "none";
  
            secrets.secrets.forEach((secret) => {
              const secretHTML = `
               <li class="secret full-width" id="secret${ secret.id }">
                <div class="card">
                  <span class="tag ${secret.category}">${secret.category}</span>
                  <div class="card-header">
                    <div class="avatar-profile">
                      <img src="../.${secret.profile_picture}" class="profile-pic" alt="Avatar Profile">
                    </div>
                    <div class="user-info">
                      <span class="tag ${secret.category}">${secret.category}</span>
                      <p class="username">
                        @gossipa${secret.user_id}
                        <img src="${secret.verified == true ? "../../img/badge.png" : " "}" style="display: ${secret.verified == true ? "inline-block" : "none"}" alt="Verification Badge" />
                        </p>
                    </div>
                  </div>
                  <div class="card-content">
                    <p>
                      <span class="content">${secret.secret.substring(0, 250)}...</span>
  
                      <button data-full="${ secret.secret }"
                                                    data-truncated="${ secret.secret.substring(0, 250) + '...' }" class="read">Read More</button>
                    </p>
                  </div>
                <div class="comment-section" data-secret-id="${ secret.id }">
  
                                                <div class="reactions sleek">
                                                  <div class="secret-card" data-id="${ secret.id }">
                                                    <div class="reactions">
                                                      <button class="reaction-btn reaction" data-type="like">
                                                        <span class="reaction-count">
                                                          ${ secret.reactions.like ? secret.reactions.like.count : 0 }
                                                        </span>
                                                      </button>
                                                    </div>
  
                                                    <div class="floating-lottie" data-type="like"></div>
                                                  </div>
  
                                                  <button id="commentButton" class="reaction-btn"><i
                                                      class="fas fa-comment"></i><span class="comment-count"></span>
                                                  </button>
  
                                                </div>
  
                                                <div class="comment-dropdown" id="commentDropdown">
                                                  <form class="comment-display" method="POST" id="commentDisplay">
                                                    <ul id="comments" class="comments-list"></ul>
                                                  </form>
  
                                                  <form action="/comment" method="POST" id="comment-form">
                                                    <input type="hidden" name="id" id="secretId"
                                                      value="${ secret.id }" />
                                                    <input type="hidden" name="secretUserId"
                                                      value="${ secret.user_id }" />
                                                    <input type="hidden" name="commentUserId" value="${ secret.userId }" />
                                                    <textarea id="commentInput" placeholder="Write a comment..."
                                                      name="comment"></textarea>
                                                    <button id="postCommentButton">
                                                      Post
                                                    </button>
                                                  </form>
  
                                                </div>
                                              </div>
  
  
                                              <ul class="card-menu">
                                                <li>
                                                  <button class="menu-toggle-btn"><i
                                                      class="fas fa-ellipsis-vertical"></i></button>
                                                  <ul class="card-menu-content" style="display: none;">
                                                    <li>
                                                      <button class="report-btn" data-id="${ secret.id }">
                                                        <i class="fa-regular fa-flag"></i>Report
                                                      </button>
                                                    </li>
                                                    <li>
                                                      <button class="copy-btn">
                                                        <i class="fas fa-copy">Copy</i>
                                                      </button>
                                                    </li>
                                                  </ul>
                                                </li>
                                              </ul>
  
  
                </div>
                </li>
              `;
              secretsContainer.insertAdjacentHTML("beforeend", secretHTML);
            });
          } else {
            feeds.style.display = "block";
          }
        } catch (error) {
          console.error(error);
          secretsContainer.innerHTML = `<p class="error">No secrets available</p>`;
        }
      });
    });
  });
                </script>

<div id="recordContainer">
  <h1>Record a Voice Note</h1>
  <button id="micButton" class="mic-button" tabindex="0"><i class="fas fa-microphone"></i></button>

  <!-- Canvas for waveform visualization -->
  <!-- <canvas id="waveform"></canvas> -->

  <!-- Action buttons (discard/share) -->
  <div id="actionButtons">
      <button id="discardRecording">Discard</button>
      <button id="submitRecording">Share</button>
  </div>

  <!-- Audio player for playback after recording -->
  <audio id="audioPlayer" controls style="display:none;"></audio>
</div>




reactionTotal = 0;
reactionCount.textContent = "";
reactionCount.classList.add("hidden");
document.getElementById("floatingReactions").innerHTML = "";


            
              
// Gossipa Live Stream Handling
const endModal = document.getElementById('endStreamModal');
const saveStoryBtn = document.getElementById('saveStory');
const discardStreamBtn = document.getElementById('discardStream');
const youAreLiveBadge = document.getElementById('liveBadge');
const streamEndedNotice = document.getElementById('streamEndedNotice');
const streamId = endStreamBtn?.dataset.streamId; // Presuming streamId is passed in dataset

// Utility: Show modal
function showModal(modal) {
  modal.classList.add('visible');
}

// Utility: Hide modal
function hideModal(modal) {
  modal.classList.remove('visible');
}

// End button triggers confirmation modal
endStreamBtn?.addEventListener('click', () => {
  showModal(endModal);
});

// Save stream as story
saveStoryBtn?.addEventListener('click', async () => {
  try {
    const res = await fetch(`/api/streams/${streamId}/save`, {
      method: 'POST',
    });

    if (!res.ok) throw new Error('Failed to save');

    youAreLiveBadge?.classList.add('fade-out');
    streamEndedNotice?.classList.add('fade-in');
    endStreamBtn?.classList.add('hide');

    hideModal(endModal);
  } catch (err) {
    console.error('Error saving stream:', err);
  }
});

// Discard the stream
discardStreamBtn?.addEventListener('click', async () => {
  try {
    const res = await fetch(`/api/streams/${streamId}/discard`, {
      method: 'DELETE',
    });

    if (!res.ok) throw new Error('Failed to discard');

    youAreLiveBadge?.classList.add('fade-out');
    streamEndedNotice?.classList.add('fade-in');
    endStreamBtn?.classList.add('hide');

    hideModal(endModal);
  } catch (err) {
    console.error('Error discarding stream:', err);
  }
});

function showToast(message) {
  const toast = document.createElement('div');
  toast.className = 'gossipa-toast';
  toast.textContent = message;
  document.body.appendChild(toast);

  setTimeout(() => {
    toast.classList.add('fade-out');
    toast.addEventListener('animationend', () => toast.remove());
  }, 3000);
}


<script>
  const fetchTopDiscussedSecret = async () => {
    try {
      const response = await fetch("/top-discussed");
      const data = await response.json();
      const topSecret = data.topSecret;

      if (data.success) {
        showAnnouncement(topSecret);
      } else {
        console.log("No trending secret to display.");
      }
    } catch (error) {
      console.error("Error fetching top discussed secret:", error);
    }
  };

  pinSecret = (topSecret) => {
    const pinnedSection = document.getElementById("pinned");
    pinnedSection.classList.add("visible")
    pinnedSection.innerHTML = `
<li class="secret">
<div class="pin-card">
<h3> Top Gossip </h3>
<br/>
<div class="card">
<small>~~ @anonym${topSecret.user_id} ~~</small>

<p>
${topSecret.secret.substring(0, 250) + "..."}
<center>
<a id="pinnedButton" class="read"
href="#secret${topSecret.id}"
style="
background: none;
font-size: 1rem;
padding: 0;
font-weight: bold;
display: block !important;
"
>View secret</a
>
</center>
</p>

<i class="fas fa-thumbtack pinned"></i>

</div>
</div>
</li>
`;


    document.getElementById("pinnedButton").addEventListener("click", function (e) {
      e.preventDefault()

      const target = document.getElementById(`secret${topSecret.id}`);

      // Smooth Scroll
      target.scrollIntoView({ behavior: "smooth", block: "center" });

      // Add highlight effect
      target.querySelector(".card").classList.add("highlight");
      target.querySelector(".card").style.width = '100% !important'
      target.querySelector("card").style.flex = '1 1 100% !important'

    })

    // highlightElement(pinnedSection)
    // Set a timeout to unpin the secret after 24 hours
    setTimeout(() => {
      pinnedSection.innerHTML = "";
    }, 24 * 60 * 60 * 1000); // 24 hours
  };

  // Schedule the announcement at 12:00 PM GMT
  now = new Date();
  targetTime = new Date();
  targetTime.setUTCHours(11, 0, 0, 0); // 12:00 PM GMT
  timeUntilAnnouncement = targetTime - now;

  setTimeout(fetchTopDiscussedSecret, timeUntilAnnouncement);
</script>


<script>
                    const startBtn = document.getElementById("startStreamBtn");
                    const streamModal = document.getElementById("streamModal");
                    const closeModal = document.getElementById("closeStreamModal");
                    const endStreamBtn = document.getElementById("endStreamBtn");
                    const liveGistInput = document.getElementById("liveGistInput");
                    const streamContentBox = document.getElementById("streamContentBox");
                    const reactionCount = document.getElementById("reactionCount");
                    const liveStreams = document.getElementById("liveStreams");
                    const listenerCount = document.getElementById("listenerCount");
                    const streamDisplay = document.getElementById("streamDisplay");
                    const streamUser = document.querySelector(".stream-user");
                    const closeStreamView = document.getElementById("closeStreamView");
                    const allUserHeaders = document.querySelectorAll(`.header${window.currentUserId}`);
                    const liveBadgeElements = document.querySelectorAll(".you-live-badge");
                    const postContainer = document.getElementById("postContainer");

                    function togglePostContainer(visible) {
                      if (postContainer) {
                        postContainer.style.display = visible ? "block" : "none";
                      }
                    }


                    let streamTimeout;
                    let inactivityTimeout;
                    let isStreaming = false;
                    let reactionTotal = 0;
                    let listeners = 0;
                    let myStreamCard = null;


                    const verified = "<%= verification ? true : false %>";
                    let userId = "<%= userId %> "
                     userId = window.currentUserId
                    // === STREAM INITIATION ===

                    if (verified) {
                      startBtn.addEventListener("click", () => {
                        const label = startBtn.querySelector("span").textContent;

                        if (label === "End Stream" && isStreaming) {
                          window.socket.emit("end-live-gist", { userId: window.currentUserId });
                          endMyStream();
                        } else {
                          streamModal.classList.remove("hidden");
                          liveGistInput.focus();
                        }
                      });
                    }

                    if (!verified) {
                      startBtn.setAttribute("disabled", true);
                      startBtn.classList.add("disabled"); // add greyed-out style
                      startBtn.title = "Subscribe as Chief Gossipa to stream live gists";
                    }



                    // === CANCEL FROM MODAL ===
                    closeModal.addEventListener("click", () => {
                      streamModal.classList.add("hidden");
                      liveGistInput.value = "";
                      reactionTotal = 0;
                      reactionCount.classList.add("hidden");
                      reactionCount.textContent = "";
                    });

                    // === END FROM MODAL BUTTON ===
                    endStreamBtn.addEventListener("click", () => {
                      if (isStreaming) {
                        window.socket.emit("end-live-gist", { userId: window.currentUserId });
                        endMyStream();
                        togglePostContainer(true);
                      }
                    });

                    // === CLOSE STREAM DISPLAY ===
                    closeStreamView.addEventListener("click", () => {
                      streamDisplay.classList.add("hidden");
                    });

                    // === STREAM INPUT HANDLER ===
                    liveGistInput.addEventListener("input", (e) => {
                      resetInactivityTimer();
                      clearTimeout(streamTimeout);

                      if (!window.socket || !window.socket.connected) return;


                      const value = e.target.value;

                      streamTimeout = setTimeout(() => {
                        if (!value.trim()) return;

                        window.socket.emit("live-gist", {
                          userId: window.currentUserId,
                          content: value,
                        });

                        // First-time stream start
                        if (!isStreaming) {
                          isStreaming = true;
                          startBtn.querySelector("span").textContent = "End Stream";
                          startBtn.classList.add("streaming")

                          // Show live badge on user header(s)
                          allUserHeaders.forEach(header => {
                            const badge = header.querySelector(".you-live-badge");
                            const username = header.querySelector(".user")?.textContent.trim();
                            if (username === `@amebo${window.currentUserId}`) {
                              badge?.classList.remove("hidden");
                            }
                          });

                          // const avatarUrl = `../.${}`;
                          myStreamCard = addLiveGistCard({
                            userId: window.currentUserId,
                            content: value,
                            // avatarUrl
                          });

                          if (myStreamCard) {
                            myStreamCard.style.display = "none"; // Don't show own card
                          }

                          if (userId === window.currentUserId) return null; // before card creation

                        }
                      }, 300);
                    });

                    // === INACTIVITY HANDLER ===
                    function resetInactivityTimer() {
                      clearTimeout(inactivityTimeout);
                      inactivityTimeout = setTimeout(() => {
                        if (isStreaming) {
                          socket.emit("end-live-gist", { userId: window.currentUserId });
                          endMyStream();
                        }
                      }, 2 * 60 * 1000); // 2 min
                    }

                    // === STREAM END ===
                    function endMyStream() {


                      const card = document.querySelector(`.stream-card[data-user-id="${currentUserId}"]`);
                      if (card) card.remove();
                      myStreamCard = null;
                      streamModal.classList.add("hidden");
                      startBtn.classList.remove("streaming")
                      liveGistInput.value = "";


                      allUserHeaders.forEach(header => {
                        const badge = header.querySelector(".you-live-badge");
                        const username = header.querySelector(".user")?.textContent.trim();
                        if (username === `@amebo${window.currentUserId}`) {
                          badge?.classList.add("hidden");
                        }
                      });

                      startBtn.querySelector("span").textContent = "Stream Gist";
                      isStreaming = false;
                    }

                    // === CARD CREATION ===
                    function addLiveGistCard({ userId, content, avatarUrl, endedAt }) {
                      let card = document.querySelector(`.stream-card[data-user-id="${userId}"]`);
                      if (!card) {
                        card = document.createElement("div");
                        card.className = "stream-card active";
                        card.dataset.userId = userId;
                        card.innerHTML = `
      <div class="gist-snippet">${content.slice(0, 80)}</div>

    `;

                        togglePostContainer(false);

                        card.onclick = async () => {
                          if (endedAt) {
                            await showEndedStream({ userId, content, endedAt });
                          } else {
                            try {
                              const response = await fetch(`/user/${userId}`);
                              const userData = await response.json();

                              streamUser.querySelector(".profile-pic").src = `../.${userData.profile_picture}`;
                              streamUser.querySelector(".user").innerHTML = `@gossipa${userData.id}`;
                              streamUser.querySelector(".v-badge").style.display = userData.verified ? "inline" : "none";
                              streamUser.querySelector(".v-badge").src = userData.verified ? "../../img/badge.png" : null;

                              streamContentBox.innerText = content;
                              streamDisplay.classList.remove("hidden");
                              streamDisplay.scrollIntoView({ behavior: "smooth" });

                              socket.emit("join-live-gist", { streamUserId: userId });
                            } catch (err) {
                              console.error("Error loading live stream:", err);
                            }
                          }
                        };

                        if (userId !== window.currentUserId) {
                          liveStreams.prepend(card);
                        }
                      } else {
                        card.querySelector(".gist-snippet").innerText = content.slice(0, 80);
                      }

                      if (userId === window.currentUserId) return null;


                      return card;
                    }

                    // === SHOW ENDED STREAM ===
                    async function showEndedStream({ userId, content, endedAt }) {
                      try {
                        const response = await fetch(`/user/${userId}`);
                        const userData = await response.json();

                        document.querySelectorAll(`.header${userId}`).forEach(header => {
                          const badge = header.querySelector(".you-live-badge");
                          const username = header.querySelector(".user")?.textContent.trim();
                          if (username === `@amebo${userId}`) badge?.classList.add("hidden");
                        });

                        streamUser.querySelector(".profile-pic").src = `../.${userData.profile_picture}`;
                        streamUser.querySelector(".user").innerHTML = `@gossipa${userData.id}`;
                        streamUser.querySelector(".v-badge").style.display = userData.verified ? "inline" : "none";
                        streamUser.querySelector(".v-badge").src = userData.verified ? "../../img/badge.png" : null;

                        streamContentBox.innerHTML = "";

                        const diffSeconds = Math.floor((Date.now() - endedAt) / 1000);
                        const timeAgo = diffSeconds < 60 ? `${diffSeconds}s ago`
                          : diffSeconds < 3600 ? `${Math.floor(diffSeconds / 60)}m ago`
                            : `${Math.floor(diffSeconds / 3600)}h ago`;

                        const timeLabel = document.createElement("div");
                        timeLabel.className = "stream-ended-label";
                        timeLabel.textContent = `🛑 Stream Ended • ${timeAgo}`;
                        streamContentBox.appendChild(timeLabel);

                        const typedText = document.createElement("div");
                        typedText.className = "typed-stream";
                        streamContentBox.appendChild(typedText);

                        let i = 0;
                        function typeNext() {
                          if (!content) return;
                          if (i < content.length) {
                            typedText.textContent += content[i++];
                            setTimeout(typeNext, 50); // Slightly slower for visibility
                          }
                        }
                        typedText.textContent = ""; // clear before typing
                        setTimeout(() => {
                          typeNext()
                        }, 500);

                        streamDisplay.classList.remove("hidden");
                        streamDisplay.scrollIntoView({ behavior: "smooth" });

                      } catch (err) {
                        console.error("Error loading ended stream:", err);
                      }
                    }

                    if (window.socket) {
                    // === SOCKET EVENTS ===
                    window.socket.on("live-gist-started", ({ userId }) => {
                      document.querySelectorAll(`.header${userId}`).forEach(header => {
                        const badge = header.querySelector(".you-live-badge");
                        const profile = header.querySelector(".avatar-profile");
                        const username = header.querySelector(".user")?.textContent.trim();
                        if (username === `@amebo${userId}`) {
                          badge?.classList.remove("hidden");
                          profile.style.border = '4px solid var(--secondary-color)'
                        }
                      });
                    });

                    window.socket.on("receive-live-gist", ({ userId, content, profilePicture, verification }) => {
                      if (userId === window.currentUserId) return;

                      const avatarUrl = `../.${profilePicture}`;
                      streamUser.querySelector(".profile-pic").src = avatarUrl;
                      streamUser.querySelector(".user").innerHTML = `@gossipa${userId}`;
                      streamUser.querySelector(".v-badge").style.display = verification ? "inline" : "none";
                      streamUser.querySelector(".v-badge").src = verification ? "../../img/badge.png" : null;

                      streamContentBox.innerText = content;
                      addLiveGistCard({ userId, content, avatarUrl });
                    });

                    window.socket.on("remove-live-gist", ({ userId, lastContent, endedAt }) => {
                      const card = document.querySelector(`.stream-card[data-user-id="${userId}"]`);
                      if (card) {
                        card.classList.remove("active");
                        card.classList.add("ended");
                        card.dataset.endedAt = endedAt;
                        card.dataset.lastContent = lastContent;
                        card.querySelector(".gist-snippet").innerText = lastContent.slice(0, 80);

                        if (userId !== currentUserId) {
                          card.onclick = () => showEndedStream({ userId, content: lastContent, endedAt });
                        } else {
                          endMyStream();
                        }
                      }
                    });



                    window.socket.on("active-streams", (streams) => {
                      liveStreams.innerHTML = "";

                      streams.forEach(stream => {
                        const div = document.createElement("div");
                        div.className = "stream-card";
                        div.innerHTML = `
      <img oncontextmenu="return false;"  src="${stream.profilePicture}" class="avatar" />
      <div class="content">
        <p class='username'> <span class="user">@gossipa${stream.userId}</span>
          <img oncontextmenu="return false;"  scr='../img/badge.png' alt="Verified Badge" />
          </p>
        <p>${stream.content.slice(0, 80)}</p>
        <span class="time">${new Date(stream.timestamp).toLocaleTimeString()}</span>
      </div>
    `;
                        liveStreams.appendChild(div);
                      });

                    });

                  }

                    // === INITIAL SETUP ===
                    window.addEventListener("DOMContentLoaded", () => {
                      if (startBtn && startBtn.querySelector("span")) {
                        startBtn.querySelector("span").textContent = "Stream Gist";
                      }


                      document.addEventListener("visibilitychange", () => {
                        setTimeout(() => {
                          if (!document.hidden) resetInactivityTimer();
                        }, 200);


                      });

                      // Delay request to ensure socket event handlers are ready
                      setTimeout(() => {
                        socket.emit("request-live-streams");
                      }, 100);
                    });



                  </script>

                  <script>
                              document.addEventListener('DOMContentLoaded', function () {

                                document.querySelectorAll('.reaction-btn').forEach(button => {
                                  const type = button.getAttribute('data-type');

                                  button.addEventListener('click', () => {
                                    const emojiChar = button.textContent.trim().split('\n')[0];
                                    const card = button.closest('.secret-card');
                                    const floatingContainer = card.querySelector('.floating-lottie');

                                    // === 1. EMOJI BURST AROUND BUTTON ===
                                    triggerEmojiBurst(button, emojiChar);

                                    // === 2. 3D EXTRAS AROUND BUTTON ===
                                    if (type === 'cry') {
                                      const tear = document.createElement('span');
                                      tear.className = 'emoji-particle';
                                      tear.innerText = '💧';
                                      tear.style.setProperty('--x', '0px');
                                      tear.style.setProperty('--y', '50px');
                                      button.appendChild(tear);
                                      setTimeout(() => tear.remove(), 800);
                                    }

                                    if (type === 'gasp') {
                                      const puff = document.createElement('span');
                                      puff.className = 'emoji-particle';
                                      puff.innerText = '💨';
                                      puff.style.setProperty('--x', '-10px');
                                      puff.style.setProperty('--y', '0px');
                                      button.appendChild(puff);
                                      setTimeout(() => puff.remove(), 800);
                                    }


                                    // === 5. REMOVE LOTTIE ANIMATION AFTER IT FINISHES ===
                                    setTimeout(() => {
                                      floatingContainer.classList.remove('active'); // Remove the active class
                                      floatingContainer.innerHTML = ''; // Clear the Lottie animation
                                    }, 2000); // Adjust the timeout to match the animation duration
                                  });
                                });

                                function triggerEmojiBurst(container, emojiChar) {
                                  const burstCount = 10;

                                  for (let i = 0; i < burstCount; i++) {
                                    const particle = document.createElement('span');
                                    particle.classList.add('emoji-particle');
                                    particle.innerText = emojiChar;

                                    const angle = Math.random() * 2 * Math.PI;
                                    const distance = Math.random() * 40 + 20;
                                    const x = Math.cos(angle) * distance + 'px';
                                    const y = Math.sin(angle) * distance + 'px';

                                    particle.style.setProperty('--x', x);
                                    particle.style.setProperty('--y', y);

                                    container.appendChild(particle);
                                    setTimeout(() => particle.remove(), 800);
                                  }

                                  container.classList.add('pop-animate');
                                  setTimeout(() => container.classList.remove('pop-animate'), 300);
                                }
                              });
                            </script>



                            
<script>
$(document).ready(function () {
  $(".comment-section").each(function () {
    const commentSection = $(this);

    // Submit comment form
    commentSection.find("#comment-form").on("submit", function (e) {
      e.preventDefault();

      const postType = commentSection.data("type");
      const postId = commentSection.data("post-id");

      const secretUserId = commentSection.find('[name="secretUserId"]').val();
      const commentUserId = commentSection.find('[name="commentUserId"]').val();
      const comment = commentSection.find("#commentInput").val();
      const commentDisplay = commentSection.find("#commentDisplay");
      const commentCount = commentSection.find(".comment-count");


      const url = `/comment/${postType}`;

      $.ajax({
        url: url,
        type: "POST",
        data: {
          id: postId,
          secretUserId,
          commentUserId,
          comment,
        },
        success: async function (response) {
          if (response.success) {
            try {
              // const fetchUrl = postType === "audio" ? `/audio/${postId}/more` : `/more/${postId}`;
              const fetchUrl = `/comment/${postType}/${postId}`;
              const fetchResponse = await fetch(fetchUrl);
              if (!fetchResponse.ok) throw new Error("Failed to fetch comments");

              const data = await fetchResponse.json();
              const comments = data.comments;

              if (comments) {
                let commentDisp = comments.map((comment) => `
<li class="comment-item">
<div>
<small class="user"><strong>@anonym${comment.user_id}</strong></small>
<p class="comment">${comment.comment}</p>
<button class="translate-btn" data-id="${comment.id}" data-text="${comment.comment}">Translate to english</button>
<p class="translated-text" id="translated-${comment.id}"></p>
</div>
</li>
`).join("");

                commentDisplay.html(`
<ul id="comments">
<p class="total">All comments: ${data.totalComments}</p>
${commentDisp}
</ul>
`);

                commentCount.html(`${data.totalComments}`);
              } else {
                commentDisplay.html(`
<ul id="comments">
<p class="total">${data.noComment}</p>
</ul>
`);
              }
            } catch (err) {
              console.log(err);
            }

            commentSection.find("#commentInput").val(""); // clear input
          } else {
            console.log("Failed to post comment:", response.message);
          }
        },
        error: function (err) {
          console.log("Error submitting comment:", err);
        },
      });
    });

    // Translation handler (delegated for dynamic buttons)
    commentSection.on("click", ".translate-btn", function (e) {
      e.preventDefault();
      const btn = $(this);
      const commentText = btn.data("text");
      const commentId = btn.data("id");
      const postId = commentSection.data("post-id");
      const translatedBox = commentSection.find(`#translated-${postId}-${commentId}`);

      $.ajax({
        url: "/translate",
        type: "POST",
        contentType: "application/json",
        data: JSON.stringify({ text: commentText, targetLang: "en" }),
        success: function (res) {
          if (res.translated) {
            translatedBox.text(res.translated);
          } else {
            translatedBox.text("Translation failed.");
          }
        },
        error: function (err) {
          translatedBox.text("Error translating comment.");
        },
      });
    });
  });
});
</script>


<script>

document.addEventListener("DOMContentLoaded", () => {
  const commentSections = document.querySelectorAll(".comment-section");

  commentSections.forEach(async (section) => {
    const commentList = section.querySelector(".comments-list");


    // Toggle dropdown
    section.querySelector("#commentButton").addEventListener("click", () => {
      const dropdown = section.querySelector(".comment-dropdown");
      dropdown.classList.toggle("active");

      const icon = section.querySelector("#commentButton i");
      icon.className = dropdown.classList.contains("active")
        ? "fas fa-comment-slash"
        : "fas fa-comment";
    });

    const postType = section.closest(".secret").dataset.type;
    const postId = section.querySelector("#audioId")?.value || section.querySelector("#secretId")?.value;
    const fetchUrl = `/comment/${postType}/${postId}`;

    // Fetch and display comments
    try {
      const response = await fetch(fetchUrl);
      const data = await response.json();
      const comments = data.comments;

      if (comments && comments.length > 0) {
        section.querySelector(".comment-display").insertAdjacentHTML(
          "afterbegin",
          `<p class="total">All comments: ${data.totalComments}</p>`
        );



        comments.forEach((comment) => {
          const li = document.createElement("li");
          li.className = "comment-item";
          li.innerHTML = `
<div>
<small class="user"><strong>@anonym${comment.user_id}</strong></small>
<p class="comment">${comment.comment}</p>
</div>
<button type="button" class="translate-btn" data-id="${comment.id}" data-text="${comment.comment}">Translate to english</button>
<p class="translated-text" id="translated-${postId}-${comment.id}"></p>
`;
          commentList.appendChild(li);
        });
      } else {
        commentList.innerHTML = `<p class="total">${data.noComment}</p>`;
      }
    } catch (err) {
      console.error("Error loading comments:", err);
    }

    // Delegate click for Translate buttons inside this section
    commentList.addEventListener("click", async (e) => {
      if (e.target.classList.contains("translate-btn")) {
        const btn = e.target;
        const text = btn.dataset.text;
        const id = btn.dataset.id;
        const output = section.querySelector(`#translated-${postId}-${id}`);

        output.innerText = "Translating...";

        try {
          const res = await fetch("/translate", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ text, targetLang: "en" }),
          });

          const result = await res.json();
          if (result.translated) {
            output.innerText = result.translated;
          } else {
            output.innerText = "Translation failed.";
          }
        } catch (err) {
          output.innerText = "Error translating comment.";
          console.error(err);
        }
      }
    });
  });
});
</script>



